[{"path":"https://randrescastaneda.github.io/joyn/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 joyn authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"advanced-use","dir":"Articles","previous_headings":"","what":"Advanced use","title":"Advanced functionalities","text":"vignette let explore additional features available joyn, example use case. Suppose want join tables x y, variable country available . one five things:","code":""},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"use-variable-country-as-one-of-the-key-variables","dir":"Articles","previous_headings":"Advanced use","what":"1. Use variable country as one of the key variables","title":"Advanced functionalities","text":"don’t use argument , joyn consider country id key variables default given common x y. Alternatively, can specify join country","code":"# The variables with the same name, `id` and `country`, are used as key # variables.  joyn(x = x,       y = y) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 4   44.4% #> 2     y 4   44.4% #> 3 x & y 1   11.1% #> 4 total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id and country from id, gdp, and country #>       id     t country   gdp  .joyn #>    <num> <int>   <num> <int> <fctr> #> 1:     1     1      16    11  x & y #> 2:     4     2      12    NA      x #> 3:     2     1       3    NA      x #> 4:     3     2      NA    NA      x #> 5:    NA    NA      15    NA      x #> 6:     2    NA      17    15      y #> 7:     5    NA      18    20      y #> 8:     6    NA      19    13      y #> 9:     3    NA      20    10      y # Joining by country  joyn(x = x,       y = y,       by = \"country\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 4   44.4% #> 2     y 4   44.4% #> 3 x & y 1   11.1% #> 4 total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables country from id, gdp, and country #>       id     t country   gdp  .joyn #>    <num> <int>   <num> <int> <fctr> #> 1:     1     1      16    11  x & y #> 2:     4     2      12    NA      x #> 3:     2     1       3    NA      x #> 4:     3     2      NA    NA      x #> 5:    NA    NA      15    NA      x #> 6:    NA    NA      17    15      y #> 7:    NA    NA      18    20      y #> 8:    NA    NA      19    13      y #> 9:    NA    NA      20    10      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"ignore-the-values-of-country-from-y-and-dont-bring-it-into-the-resulting-table","dir":"Articles","previous_headings":"Advanced use","what":"2. Ignore the values of country from y and don’t bring it into the resulting table","title":"Advanced functionalities","text":"default include country part key variables argument .","code":"joyn(x = x,       y = y,       by = \"id\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, gdp, and country #>       id     t country   gdp  .joyn #>    <num> <int>   <num> <int> <fctr> #> 1:     1     1      16    11  x & y #> 2:     4     2      12    NA      x #> 3:     2     1       3    15  x & y #> 4:     3     2      NA    10  x & y #> 5:    NA    NA      15    NA      x #> 6:     5    NA      NA    20      y #> 7:     6    NA      NA    13      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"update-only-nas-in-table-x","dir":"Articles","previous_headings":"Advanced use","what":"3. Update only NAs in table x","title":"Advanced functionalities","text":"Another possibility make use update_NAs argument joyn(). allows update NAs values variable country table x actual values matching observations country table y. case, actual values country table x remain unchanged.","code":"joyn(x = x,      y = y,       by = \"id\",       update_NAs = TRUE) #>  #> ── JOYn Report ── #>  #>         .joyn     n percent #>        <char> <int>  <char> #> 1:          x     2   28.6% #> 2:      x & y     2   28.6% #> 3: NA updated     3   42.9% #> 4:      total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, gdp, and country #>       id     t country   gdp      .joyn #>    <num> <int>   <num> <int>     <fctr> #> 1:     1     1      16    11      x & y #> 2:     4     2      12    NA          x #> 3:     2     1       3    15      x & y #> 4:     3     2      20    10 NA updated #> 5:    NA    NA      15    NA          x #> 6:     5    NA      18    20 NA updated #> 7:     6    NA      19    13 NA updated"},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"update-actual-values-in-table-x","dir":"Articles","previous_headings":"Advanced use","what":"4. Update actual values in table x","title":"Advanced functionalities","text":"can also update values - NAs actual - variable country table x actual values matching observations country y. done setting update_values = TRUE. Notice reportvar allows keep track update worked. case, value update means values different country x country y updated. However, let’s consider possible cases: , matching observations, values two country variables , reporting variable report x & y instead (know update make). NAs country y, actual values x unchanged, see updated status reporting variable. Nevertheless, notice another way bring country y x. done argument keep_y_in_x (see 5. ⬇️)","code":"# Notice that only the value that are   joyn(x = x,       y = y,       by = \"id\",       update_values = TRUE) #>  #> ── JOYn Report ── #>  #>            .joyn     n percent #>           <char> <int>  <char> #> 1:    NA updated     3   42.9% #> 2: value updated     2   28.6% #> 3:   not updated     2   28.6% #> 4:         total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, gdp, and country #>       id     t country   gdp         .joyn #>    <num> <int>   <num> <int>        <fctr> #> 1:     1     1      16    11 value updated #> 2:     4     2      12    NA   not updated #> 3:     2     1      17    15 value updated #> 4:     3     2      20    10    NA updated #> 5:    NA    NA      15    NA   not updated #> 6:     5    NA      18    20    NA updated #> 7:     6    NA      19    13    NA updated"},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"keep-matching-names-variable-from-y-into-x--not-updating-values-in-x","dir":"Articles","previous_headings":"Advanced use > 5. Keep original country variable from y into returning table","what":"(Keep matching-names variable from y into x -not updating values in x)","title":"Advanced functionalities","text":"Another available option bringing original variable country y resulting table, without using update values x. order distinguish country x country y, joyn assign suffix variable’s name: get country.y country.x. can done specifying keep_common_vars = TRUE.","code":"joyn(x = x,       y = y,       by = \"id\",       keep_common_vars = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, gdp, and country #>       id     t country.x   gdp country.y  .joyn #>    <num> <int>     <num> <int>     <int> <fctr> #> 1:     1     1        16    11        16  x & y #> 2:     4     2        12    NA        NA      x #> 3:     2     1         3    15        17  x & y #> 4:     3     2        NA    10        20  x & y #> 5:    NA    NA        15    NA        NA      x #> 6:     5    NA        NA    20        18      y #> 7:     6    NA        NA    13        19      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/adv-functionalities.html","id":"bring-other-variables-from-y-into-returning-table","dir":"Articles","previous_headings":"Advanced use","what":"Bring other variables from y into returning table","title":"Advanced functionalities","text":"joyn , can also bring non common variables y resulting table. fact can specify y_vars_to_keep, shown example : Notice set y_vars_to_keep = FALSE y_vars_to_keep = NULL, joyn won’t bring variable returning table.","code":"# Keeping variable gdp   joyn(x = x,       y = y,       by = \"id\",       y_vars_to_keep = \"gdp\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #>       id     t country   gdp  .joyn #>    <num> <int>   <num> <int> <fctr> #> 1:     1     1      16    11  x & y #> 2:     4     2      12    NA      x #> 3:     2     1       3    15  x & y #> 4:     3     2      NA    10  x & y #> 5:    NA    NA      15    NA      x #> 6:     5    NA      NA    20      y #> 7:     6    NA      NA    13      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/aux-functions.html","id":"verifying-if-dt-is-uniquely-identified","dir":"Articles","previous_headings":"","what":"Verifying if dt is uniquely identified","title":"Additional functions","text":"One advantages joyn can perform one--one (1:1), one--many (1:m), many--one (m:1), many--many (m:m) joins. is_id() function might come handy want check whether data table uniquely identified variables want merge . fact is_id() checks default, returning either TRUE FALSE depending whether data table uniquely identified . Alternatively, can set return_report = FALSE get summary duplicates.","code":"x1 <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15,                  c  = c(\"a\", \"b\", \"a\", \"t\", \"d\"),                  c1 = c(\"h\", \"j\", \"k\", \"l\", \"y\"))  y1 <- data.table(id = c(1,2, 4),                  y  = c(11L, 15L, 16))  # Checking if x1 is uniquely identified by \"id\" with return_report = TRUE  is_id(dt = x1,        by = \"id\") #> ! Duplicates found by: `id` #> [1] FALSE  # Checking duplicates in x1 with return_report = FALSE  is_id(dt = x1,        by = \"id\",        return_report = FALSE) #> ! Duplicates found by: `id` #> [1] FALSE"},{"path":"https://randrescastaneda.github.io/joyn/articles/aux-functions.html","id":"possible-unique-identifiers","dir":"Articles","previous_headings":"","what":"Possible unique identifiers","title":"Additional functions","text":"joyn, can also search variables possibly uniquely identify data table x using possible_ids() function. example,","code":"# Identify possible unique identifier excluding variable t possible_ids(dt      = x1,               exclude = \"t\") #> ℹ Variables to test: id, x, c, and c1 #> ℹ Found unique identifiers: `x` and `c1` #> [[1]] #> [1] \"x\" #>  #> [[2]] #> [1] \"c1\" #>  #> attr(,\"checked_ids\") #> [1] \"id\" \"c\"  \"x\"  \"c1\"  # Identify possible unique identifier excluding character variables possible_ids(dt      = x1,               exclude = \"_character\") #> ! var `_character` not found in dataframe #> ℹ Variables to test: id, t, x, c, and c1 #> ℹ Found unique identifiers: `x` and `c1` #> [[1]] #> [1] \"x\" #>  #> [[2]] #> [1] \"c1\" #>  #> attr(,\"checked_ids\") #> [1] \"t\"  \"id\" \"c\"  \"x\"  \"c1\"  # Identify possible unique identifiers, excluding character variables but considering variable c1 possible_ids(dt      = x1,               exclude_classes = \"character\",              include = \"c1\") #> ℹ Variables to test: id, t, x, and c1 #> ℹ Found unique identifiers: `x` and `c1` #> [[1]] #> [1] \"x\" #>  #> [[2]] #> [1] \"c1\" #>  #> attr(,\"checked_ids\") #> [1] \"t\"  \"id\" \"x\"  \"c1\""},{"path":"https://randrescastaneda.github.io/joyn/articles/aux-functions.html","id":"verifying-if-data-table-is-balanced","dir":"Articles","previous_headings":"","what":"Verifying if data table is balanced","title":"Additional functions","text":"Additionally, joyn makes available user is_balanced() function. instrumental assessing completeness data table within specified group, .e., table contains combinations observations group. default, is_balanced() tell /table balanced. However, set return = \"table\", get summary unbalanced observations. words, combinations elements specified variables contained input table.","code":"# Example with return = \"logic\", the default  is_balanced(df = x1,             by = c(\"id\", \"t\")) #> [1] FALSE  # Example with return = \"table\" is_balanced(df = x1,             by = c(\"id\", \"t\"),              return = \"table\") #>   id t #> 1  3 1 #> 2  2 2"},{"path":"https://randrescastaneda.github.io/joyn/articles/aux-functions.html","id":"tabulating-simple-frequencies","dir":"Articles","previous_headings":"","what":"Tabulating simple frequencies","title":"Additional functions","text":"Furthermore, joyn provides function generates simple frequency tables, can easily overview distribution values within data tables.","code":"# Tabulating frequencies of var `id`  freq_table(x     = x1,             byvar = \"id\")[] #>        id     n percent #>    <char> <int>  <char> #> 1:      1     2     40% #> 2:      2     1     20% #> 3:      3     1     20% #> 4:   <NA>     1     20% #> 5:  total     5    100%  # Removing NAs from the calculation  freq_table(x     = x1,             byvar = \"id\",             na.rm = TRUE)[] #>        id     n percent #>    <char> <int>  <char> #> 1:      1     2     50% #> 2:      2     1     25% #> 3:      3     1     25% #> 4:  total     4    100%"},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"dplyr joins wrappers","text":"Joining data tables joyn particularly convenient allows analyze/aware quality merging. vignette explores dplyr-like join functions available joyn. major objective let employ syntax supposedly already familiar - dplyr one - time benefiting additional tools joyn offers. , obtaining additional information verification joining. four types dplyr-like join functions joyn: Left joins: joyn::left_join() Right joins: joyn::right_join() Full joins: joyn::full_join() Inner joins: joyn::inner_join() wrapper works similar way corresponding dplyr function.","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table)"},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"dplyr joins wrappers","text":"Suppose want perform simple left join tables x1 y1. joyn two possibilities: using joyn() function, specifying keep = \"left\" using joyn::left_join() function addition, use dplyr::left_join() base R merging functions. Consider three options: Comparing results, returning data table produced. However, joyn::left_join() allows enjoy intuitive syntax dplyr additional tools joyn. include additional options customize join performed, availability joyn report, messages informing time execution status join well execution various checks merging. (additional information joyn’s features, please take look articles website.)","code":"x1 <- data.table(id  = c(1L, 1L, 2L, 3L, NA_integer_),                  t   = c(1L, 2L, 1L, 2L, NA_integer_),                  x   = 11:15)  y1 <- data.table(id  = c(1,2, 4),                  y   = c(11L, 15L, 16)) # Option 1  joyn(x          = x1,       y          = y1,       keep       = \"left\",      match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2     y 1     20% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x  # Option 2   joyn::left_join(x            = x1,                  y            = y1,                  relationship = \"many-to-one\")  #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2     y 1     20% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x  # Option 3  dplyr::left_join(x            = x1,                   y            = y1,                   relationship = \"many-to-one\")  #> Joining with `by = join_by(id)` #>       id     t     x     y #>    <num> <int> <int> <num> #> 1:     1     1    11    11 #> 2:     1     2    12    11 #> 3:     2     1    13    15 #> 4:     3     2    14    NA #> 5:    NA    NA    15    NA"},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"left-join","dir":"Articles","previous_headings":"Some examples","what":"1. Left join","title":"dplyr joins wrappers","text":"ℹ️ Left joins return output table rows x, .e., left table, matching rows y, .e., right table. Example usage joyn’s additional options: Updating NAs left table Using update_NAs argument joyn can update values NA t variable left table actual values matching column t right one Specifying variables keep right table join","code":"# Data tables to be joined   df1 <- data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_, NA_integer_),                   t  = c(1L, 2L, 1L, 2L, NA_integer_, 4L),                   x  = 11:16)  df2 <- data.frame(id = c(1,2, 4, NA_integer_, 8),                   y  = c(11L, 15L, 16, 17L, 18L),                   t  = c(13:17)) left_join(x            = df1,            y            = df2,           relationship = \"many-to-one\",            by           = \"id\",           update_NAs   = TRUE) #>  #> ── JOYn Report ── #>  #>         .joyn     n percent #>        <char> <int>  <char> #> 1:          x     1   16.7% #> 2:      x & y     4   66.7% #> 3: NA updated     1   16.7% #> 4:      total     6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, y, and t #>   id t.x  x  y t.y      .joyn #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 4  3   2 14 NA  NA          x #> 5 NA  16 15 17  16 NA updated #> 6 NA   4 16 17  16      x & y left_join(x              = df1,            y              = df2,           relationship   = \"many-to-one\",            by             = \"id\",            y_vars_to_keep = \"y\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 1   16.7% #> 2     y 2   33.3% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #>   id  t  x  y .joyn #> 1  1  1 11 11 x & y #> 2  1  2 12 11 x & y #> 3  2  1 13 15 x & y #> 4  3  2 14 NA     x #> 5 NA NA 15 17 x & y #> 6 NA  4 16 17 x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"right-join","dir":"Articles","previous_headings":"Some examples","what":"2. Right join","title":"dplyr joins wrappers","text":"ℹ️ Right joins return output table matching rows x, .e., left table, rows y, .e., right table. Example usage joyn’s additional options: Specifying name reporting variable Updating values common variables setting update_values = TRUE, values x (NAs ) updated actual values variables y name ones x. can see status update reporting variable.","code":"right_join(x            = df1,            y            = df2,           relationship = \"many-to-one\",            by           = \"id\",           reportvar    = \"right.joyn\") #>  #> ── JOYn Report ── #>  #>   right.joyn n percent #> 1          x 1   14.3% #> 2          y 2   28.6% #> 3      x & y 4   57.1% #> 4      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable right.joyn #> ℹ Note: Removing key variables id from id, y, and t #>   id t.x  x  y t.y right.joyn #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 4  4  NA NA 16  15          y #> 5  8  NA NA 18  17          y #> 6 NA  NA 15 17  16      x & y #> 7 NA   4 16 17  16      x & y right_join(x            = df1,             y            = df2,            relationship = \"many-to-one\",             by           = \"id\",            reportvar    = \"right.joyn\") #>  #> ── JOYn Report ── #>  #>   right.joyn n percent #> 1          x 1   14.3% #> 2          y 2   28.6% #> 3      x & y 4   57.1% #> 4      total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable right.joyn #> ℹ Note: Removing key variables id from id, y, and t #>   id t.x  x  y t.y right.joyn #> 1  1   1 11 11  13      x & y #> 2  1   2 12 11  13      x & y #> 3  2   1 13 15  14      x & y #> 4  4  NA NA 16  15          y #> 5  8  NA NA 18  17          y #> 6 NA  NA 15 17  16      x & y #> 7 NA   4 16 17  16      x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"full-join","dir":"Articles","previous_headings":"Some examples","what":"3. Full join","title":"dplyr joins wrappers","text":"ℹ️ Full joins return output table rows, matching non matching rows x, .e., left table, y, .e., right table.","code":"full_join(x = x1,            y = y1,            relationship = \"many-to-one\",            keep = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id.y, id, and y #>       id     t     x  id.y     y  .joyn #>    <num> <int> <int> <num> <num> <fctr> #> 1:     1     1    11     1    11  x & y #> 2:     1     2    12     1    11  x & y #> 3:     2     1    13     2    15  x & y #> 4:     3     2    14    NA    NA      x #> 5:     4    NA    NA     4    16      y #> 6:    NA    NA    15    NA    NA      x"},{"path":"https://randrescastaneda.github.io/joyn/articles/dplyr-joins.html","id":"inner-join","dir":"Articles","previous_headings":"Some examples","what":"4. Inner join","title":"dplyr joins wrappers","text":"ℹ️ Inner joins return output table rows match x, .e., left table, y, .e., right table. Simple inner join","code":"inner_join(x            = df1,             y             = df2,            relationship  = \"many-to-one\",             by            = \"id\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 1     20% #> 2     y 2     40% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, y, and t #>   id t.x  x  y t.y .joyn #> 1  1   1 11 11  13 x & y #> 2  1   2 12 11  13 x & y #> 3  2   1 13 15  14 x & y #> 4 NA  NA 15 17  16 x & y #> 5 NA   4 16 17  16 x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Main functionalities","text":"📌 joyn, two major sets tools join data tables: primary function joyn() Dplyr-like join functions: left_join(), right_join(), full_join(), inner_join() vignette explore main function joyn(). can read dplyr-joins “dplyr-joins” article instead.","code":""},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"general-use","dir":"Articles","previous_headings":"","what":"General use","title":"Main functionalities","text":"","code":"library(joyn) library(data.table)  x1 <- data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15)  y1 <- data.table(id = c(1,2, 4),                  y  = c(11L, 15L, 16))   x2 <- data.table(id = c(1, 4, 2, 3, NA),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = c(16, 12, NA, NA, 15))   y2 <- data.table(id = c(1, 2, 5, 6, 3),                  yd = c(1, 2, 5, 6, 3),                  y  = c(11L, 15L, 20L, 13L, 10L),                  x  = c(16:20))  x3 <- data.table(id  = c(\"c\",\"b\", \"d\", \"d\"),                  v   = 8:11,                  foo = c(4,2, 7, 3))  y3 <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L))   x4 <- data.table(id1 = c(1, 1, 2, 3, 3),                  id2 = c(1, 1, 2, 3, 4),                  t   = c(1L, 2L, 1L, 2L, NA_integer_),                  x   = c(16, 12, NA, NA, 15))  y4 <- data.table(id  = c(1, 2, 5, 6, 3),                  id2 = c(1, 1, 2, 3, 4),                  y   = c(11L, 15L, 20L, 13L, 10L),                  x   = c(16:20))   x5 <- data.table(id      = c(1, 4, 2, 3, NA),                  t       = c(1L, 2L, 1L, 2L, NA),                  country = c(16, 12, 3, NA, 15))    y5 <- data.table(id      = c(1, 2, 2, 6, 3),                  gdp     = c(11L, 15L, 20L, 13L, 10L),                  country = 16:20)"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"the-basics","dir":"Articles","previous_headings":"General use","what":"The basics","title":"Main functionalities","text":"Let’s suppose want join two tables x1 y1. output table result full join -joyn always executes default. means returning table retains matching non matching rows x1 y1. Notice resulting table also contains additional variable called .joyn, reporting variable. (Read ⬇️)","code":"# Calling joyn() to join x1 and y1  joyn(x = x1,      y = y1,       match_type = \"m:1\" ) #Note RT: remove this argument once fixing the default value #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"reporting-variable","dir":"Articles","previous_headings":"General use > The basics","what":"Reporting variable","title":"Main functionalities","text":"particular feature joyn includes reportvar returning table, informs status join. can modify name format reporting variable follows: Name: default reportvar = \".joyn\", can modify reportvar = \"myname\" specifying name want assign Format: default reporttype = \"character\" , can also set numeric using reporttype = \"numeric\" can see difference two types table below1:","code":""},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"key-variables","dir":"Articles","previous_headings":"General use > The basics","what":"Key variables","title":"Main functionalities","text":"performing join, might want specify variable(s) joyn join . default joyn consider variable(s) common x y key(s) join, suggestion make keys explicit - .e., specifying /argument don’t want join variables common x y, can alternately use equivalency element vector. specification allows join different variables x y. Also, notice joyn sort resulting table key variables . sort = TRUE default.","code":"# Join with one variable in common  joyn(x = x1,      y = y1,       by = \"id\",       match_type = \"m:1\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y joyn(x = x4,       y = y4,       by = c(\"id1 = id\", \"id2\"),       match_type = \"m:m\") #>      id1   id2     t     x     y  .joyn #>    <num> <num> <int> <num> <int> <fctr> #> 1:     1     1     1    16    11  x & y #> 2:     1     1     2    12    11  x & y #> 3:     2     2     1    NA    NA      x #> 4:     3     3     2    NA    NA      x #> 5:     3     4    NA    15    10  x & y #> 6:     2     1    NA    NA    15      y #> 7:     5     2    NA    NA    20      y #> 8:     6     3    NA    NA    13      y"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"match-type","dir":"Articles","previous_headings":"General use","what":"Match type","title":"Main functionalities","text":"💡Match type refers relationship exists observations joining tables. possibility perform joins based match type one value added using joyn. Following Stata’s convention, can four different match types: 1:1 (one one): default2, variables specified variables uniquely identify single observations table –> observation left table unique match right table viceversa 1:m (one many): left table uniquely identified byvariables –> observation var left table can multiple matches var right table m:1 (many one): right table uniquely identified byvar -> observation left table can one match right table observations right table might multiple matches left table m:m (many many): variables uniquely identify observations either table –> tables can multiple matches observation recommend always specify match type joining tables ensure output correct. However, unsure/wrong relationships observations tables, joyn let know something right. Suppose think data uniquely identified variable id, . setting match_type = \"1:1\" get error, informing match type expected. instead don’t care match types don’t think necessary use particular needs, might fine without joyn.","code":"# Many to one match type joyn(x = x1,      y = y1,      by = \"id\",      match_type = \"m:1\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y  # Many to many match type joyn(x = x3,      y = y3,      by = \"id\",      match_type = \"m:m\") #>        id     v   foo     y  .joyn #>    <char> <int> <num> <int> <fctr> #> 1:      c     8     4    11  x & y #> 2:      c     8     4    18  x & y #> 3:      b     9     2    15  x & y #> 4:      d    10     7    NA      x #> 5:      d    11     3    NA      x #> 6:      a    NA    NA    20      y  # One to one match type - the default joyn(x = x2,      y = y2,      by = \"id\",      match_type = \"1:1\") #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y  # Same join as:  joyn(x = x2,      y = y2,      by = \"id\") #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y   # One to many match type  joyn(x = x5,      y = y5,      by = \"id\",      match_type = \"1:m\") #>       id     t country   gdp  .joyn #>    <num> <int>   <num> <int> <fctr> #> 1:     1     1      16    11  x & y #> 2:     4     2      12    NA      x #> 3:     2     1       3    15  x & y #> 4:     2     1       3    20  x & y #> 5:     3     2      NA    10  x & y #> 6:    NA    NA      15    NA      x #> 7:     6    NA      NA    13      y # Merging correctly but getting error because something is not right in the data joyn(x3, y3, by = \"id\", match_type = \"1:1\") #> ✖ Error: table x is not uniquely identified by id #> ✖ Error: table y is not uniquely identified by id #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ set verbose to TRUE to see where the issue is  # Merging wrongly but getting NO errors because you did not use match_type joyn(x3, y3, by = \"id\") #> ✖ Error: table x is not uniquely identified by id #> ✖ Error: table y is not uniquely identified by id #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ set verbose to TRUE to see where the issue is"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"type-of-join","dir":"Articles","previous_headings":"General use","what":"Type of join","title":"Main functionalities","text":"Join type determines observations kept join. joyn() allows choose type join execute via keep argument. argument called keep rather join_type avoid confusion argument match_type, order reflect specifying end observations want keep. argument plays role allowing joyn() mimic behavior dplyr’s functions left_join, right_join, inner_join, full_join, default. keep can four types: keep = \"full\": default, keeps observations x y, regardless whether match . keep = \"left\" keep = \"master\" : keeps observations x, matching non, observations y match x keep = \"right\" keep = \"using\" keeps observations y, matching non, observations x match y keep = \"inner\" keeps observations match tables.","code":"# Full join   joyn(x          = x1,       y          = y1,       match_type = \"m:m\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y # keep obs in x  joyn(x          = x1,       y          = y1,       keep       = \"left\",       match_type = \"m:m\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x # keep obs in y  joyn(x          = x1,       y          = y1,      keep       = \"right\",       match_type = \"m:m\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     4    NA    NA    16      y # keep matching obs in both tables  joyn(x1, y1, keep = \"inner\", match_type = \"m:m\") #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/main-functionalities.html","id":"an-important-feature-joyn-report-and-info-display","dir":"Articles","previous_headings":"","what":"An important feature: JOYn report and info display","title":"Main functionalities","text":"Recall joyn intended informative status quality merging. 📊 JOYn report default, joyn returns JOYn report , .e., summary table merging. includes reporting variable, number rows come x, number rows come y common x y. info also shown percentage form percent column. 📝 Displaying messages One value added joyn produces number messages intended inform status join. display messages controlled argument verbose, allows show (verbose = TRUE) silent (verbose = FALSE) messages. explore messages joyn, please refer “Messages” article.","code":"joyn(x = x3,       y = y3,       by = \"id\",       match_type = \"m:m\",      verbose = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>        id     v   foo     y  .joyn #>    <char> <int> <num> <int> <fctr> #> 1:      c     8     4    11  x & y #> 2:      c     8     4    18  x & y #> 3:      b     9     2    15  x & y #> 4:      d    10     7    NA      x #> 5:      d    11     3    NA      x #> 6:      a    NA    NA    20      y"},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/articles/merge-wrapper.html","id":"simple-merge","dir":"Articles","previous_headings":"Examples","what":"Simple merge","title":"`data.table::merge()` wrapper","text":"Suppose want merge x1 y1. First notice base::merge principally data frames, joyn::merge coerces x y data tables already. default, merge join shared column name(s) x y. usual, columns want join don’t name, need tell merge columns want join : .x x data frame column name,  .y y one. example, default, sort TRUE, merged table sorted .x column. Notice output table distinguishes non-column t coming x one coming y adding .x .y suffixes -occurs .dups argument set TRUE default.","code":"# Example not specifying the key merge(x = x1,        y = y1) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning: The keys supplied uniquely identify y, therefore a m:1 join is #> executed #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y  # Example specifying the key merge(x = x1,        y = y1,       by = \"id\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning: The keys supplied uniquely identify y, therefore a m:1 join is #> executed #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y df1 <- data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_, NA_integer_),                   t  = c(1L, 2L, 1L, 2L, NA_integer_, 4L),                   x  = 11:16)  df2 <- data.frame(id = c(1,2, 4, NA_integer_, 8),                   y  = c(11L, 15L, 16, 17L, 18L),                   t  = c(13:17))  merge(x    = df1,       y    = df2,       by.x = \"x\",       by.y = \"y\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 3    100% #> 2     y 2   66.7% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables keyby1 from id, keyby1, and t #> ⚠ Warning: The keys supplied uniquely identify both x and y, therefore a 1:1 #> join is executed #>   id.x t.x  x id.y t.y .joyn #> 1    1   1 11    1  13 x & y #> 2   NA  NA 15    2  14 x & y #> 3   NA   4 16    4  15 x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/merge-wrapper.html","id":"going-further","dir":"Articles","previous_headings":"Examples","what":"Going further","title":"`data.table::merge()` wrapper","text":"similar fashion joyn() primary function , merge() offers number arguments verify/control merge1. example, joyn::joyn allows execute one--one, one--many, many--one many--many joins. Similarly, merge accepts match_type argument: similar way, can exploit additional options available joyn(), e.g., keeping common variables, updating NAs values, displaying messages etc…, can explore “Advanced functionalities” article.","code":"# Example with many to many merge joyn::merge(x          = x2,             y          = y2,             by.x       = \"id1\",             by.y       = \"id2\",             match_type = \"m:m\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     y 1   14.3% #> 2 x & y 6   85.7% #> 3 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables keyby1 from id, keyby1, y, and x #> ⚠ Warning:  Supplied both by and by.x/by.y. by argument will be ignored. #>      id1   id2     t   x.x    id     y   x.y  .joyn #>    <num> <num> <int> <num> <num> <int> <int> <fctr> #> 1:     1     1     1    16     1    11    16  x & y #> 2:     1     1     1    16     2    15    17  x & y #> 3:     1     1     2    12     1    11    16  x & y #> 4:     1     1     2    12     2    15    17  x & y #> 5:     2     2     1    NA     5    20    18  x & y #> 6:     3     3     2    NA     6    13    19  x & y #> 7:     3     4    NA    15     6    13    19  x & y  # Example with many to many merge joyn::merge(x          = x1,             y          = y1,             by         = \"id\",             match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning:  Supplied both by and by.x/by.y. by argument will be ignored. #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y"},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Messages","text":"Joyn messages can 4 different types: Info Timing Warning Error","code":"# Setup  library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table) # Checking available types of messages msgs_types = joyn:::type_choices() print(msgs_types) #> [1] \"info\"   \"note\"   \"warn\"   \"timing\" \"err\""},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"information-messages-ℹ","dir":"Articles","previous_headings":"Overview","what":"Information messages ℹ","title":"Messages","text":"Info messages intended inform various aspects join data tables involved, can see examples . Recall one additional features joyn returns reporting variable status join. Examples regard include info messages tell variable available joyn report, reporting variable returned instead. Recall one additional features joyn returns reporting variable status join. Examples regard include info messages tell variable available joyn report, reporting variable returned instead. Also, info message might let know name want assign reporting variable already present returning table, changed another one. Furthermore, info messages help keep track variables y kept merging, example notifying y variables specified keep removed part variables.","code":"# Example dataframes  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))  x3 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15))   y3 = data.table(id3  = c(1, 2, 5, 6, 3),                 id4 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 z   = c(16:20))    # ------------------- Showing which var contains joyn report -------------------  # Joining x2 and y2 joyn(x              = x2,      y              = y2,      by             = \"id\",       y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #>       id     t     x  .joyn #>    <num> <int> <num> <fctr> #> 1:     1     1    16  x & y #> 2:     4     2    12      x #> 3:     2     1    NA  x & y #> 4:     3     2    NA  x & y #> 5:    NA    NA    15      x #> 6:     5    NA    NA      y #> 7:     6    NA    NA      y  # Printing the info message joyn_msg(msg_type = \"info\") #> ℹ Note: Joyn's report available in variable .joyn  # ---------------- Info about change in reporting variable name ---------------- joyn(x              = x2,      y              = y2,      by             = \"id\",       reportvar      = \"x\",      y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>     x.1 n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable x #> ℹ Note: reportvar x is already part of the resulting table. It will be changed #> to x.1 #>       id     t     x    x.1 #>    <num> <int> <num> <fctr> #> 1:     1     1    16  x & y #> 2:     4     2    12      x #> 3:     2     1    NA  x & y #> 4:     3     2    NA  x & y #> 5:    NA    NA    15      x #> 6:     5    NA    NA      y #> 7:     6    NA    NA      y  joyn_msg(msg_type = \"info\") #> ℹ Note: Joyn's report available in variable x #> ℹ Note: reportvar x is already part of the resulting table. It will be changed #> to x.1  # ------------- Informing that reporting variable is not returned ------------- joyn(x              = x2,      y              = y2,      by             = \"id\",       reportvar      = FALSE,      y_vars_to_keep = FALSE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note:  Reporting variable is NOT returned #>       id     t     x #>    <num> <int> <num> #> 1:     1     1    16 #> 2:     4     2    12 #> 3:     2     1    NA #> 4:     3     2    NA #> 5:    NA    NA    15 #> 6:     5    NA    NA #> 7:     6    NA    NA  joyn_msg(msg_type = \"info\") #> ℹ Note:  Reporting variable is NOT returned joyn(x              = x2,      y              = y2,      by             = \"id\",       y_vars_to_keep = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y  joyn_msg(msg_type = \"info\") #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x"},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"timing-messages","dir":"Articles","previous_headings":"Overview","what":"Timing messages 🔵","title":"Messages","text":"Timing messages report many seconds join executed, including time spent perform checks. performing join, joyn keeps track time spent execution. displayed timing messages, report elapsed time measured seconds. visualizing examples, important remind feature joyn executes join two data tables. Specifically, joyn always first executes full join data tables - includes matching non matching rows resulting table. , filters rows depending specific type join user wants execute. example, user sets keep = \"right\", joyn filter table resulting full join return user data table retaining rows right table matching rows left table. addition, note since joyn performs number checks throughout execution (e.g., checking specified key merge valid, match type consistency), time spent checks also included reported time. result, timing messages enable aware : Time spent execute full join Time spent execute entire joyn function, including checks","code":"# --------------------------- Example with full join ---------------------------  joyn(x          = x1,       y          = y1,       match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y  joyn_msg(\"timing\") #> ● Timing:The full joyn is executed in 0.000313 seconds. #> ● Timing: The entire joyn function, including checks, is executed in 0.025627 #> seconds.   # --------------------------- Example with left join --------------------------- left_join(x            = x1,            y            = y1,            relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2     y 1     20% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x  joyn_msg(\"timing\") #> ● Timing:The full joyn is executed in 0.000654 seconds. #> ● Timing: The entire joyn function, including checks, is executed in 0.024559 #> seconds."},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"warning-messages","dir":"Articles","previous_headings":"Overview","what":"Warning messages ⚠️","title":"Messages","text":"joyn generates warning messages alert possible problematic situation however warrant terminating execution merge. example, provide match type inconsistent data, joyn generate warning inform actual relationship alert join executed accordingly. example , x2 y2 uniquely identified key id, user choosing “one many” relationship instead. user alerted “one one” join executed instead. similar way, warning messages generated choosing match_type = \"m:m\" \"m:1\" examples warnings arise trying supply certain arguments merging functions yet supported current version joyn. Suppose executing left-join try set na_matches argument ‘never’. joyn warn currently allows na_matches = 'na'. similar message displayed keep = NULL. Given current version joyn support inequality joins, joyn warn keep = NULL make join retain keys x.","code":"# Warning that \"id\" uniquely identifies y2   joyn(x2, y2, by = \"id\", match_type = \"1:m\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #> ⚠ Warning: The keys supplied uniquely identify y, therefore a 1:1 join is #> executed #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify y, therefore a 1:1 join is #> executed # ------------ Warning that \"id\" uniquely identifies both x2 and y2 ------------  joyn(x2, y2, by = \"id\", match_type = \"m:m\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #> ⚠ Warning: The keys supplied uniquely identify both x and y, therefore a 1:1 #> join is executed #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify both x and y, therefore a 1:1 #> join is executed  # ------------------ Warning that \"id\" uniquely identifies x2 ------------------  joyn(x2, y2, by = \"id\", match_type = \"m:1\", verbose = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #> ⚠ Warning: The keys supplied uniquely identify x, therefore a 1:1 join is #> executed #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y joyn_msg(\"warn\") #> ⚠ Warning: The keys supplied uniquely identify x, therefore a 1:1 join is #> executed joyn::left_join(x            = x1,                  y            = y1,                  relationship = \"many-to-one\",                  keep         = NULL,                 na_matches   = \"never\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2     y 1     20% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #> ⚠ Warning: Currently, joyn allows only na_matches = 'na' #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x  joyn_msg(\"warn\") #> ⚠ Warning: joyn does not currently allow inequality joins, so keep = NULL will #> retain only keys in x #> ⚠ Warning: Currently, joyn allows only na_matches = 'na'"},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"error-messages","dir":"Articles","previous_headings":"Overview","what":"Error messages ❌","title":"Messages","text":"Error messages act helpful notifications reasons join trying perform can’t executed. Error messages highlight went course provide clues fix issue merging can successfully executed. Sometimes error messages due wrong/missing provision inputs, example supply variables used key merge, x y common variable names. Error messages also pop provide input data table variables, duplicate variable names. Representative messages regard can visualized : Furthermore, errors messages generated choosing wrong match_type, consistent actual relationship variables used merging. joyn therefore display following message:","code":"# ----------------- Error due to input table x with no columns -----------------  x_empty = data.table()    joyn(x = x_empty,      y = y1) #> ✖ Error:  Input table x has no columns. #> Error in `check_xy()`: #> ! wrong input specification  joyn_msg(\"err\") #> ✖ Error:  Input table x has no columns.  # ----------------------- Error due to duplicate names  ------------------------  x_duplicates = data.table(id          = c(1L, 1L, 2L, 3L, NA_integer_),                           x           = c(1L, 2L, 1L, 2L, NA_integer_),                           x           = 11:15,                           check.names = FALSE) joyn(x = x_duplicates,      y = y1) #> ✖ Error:  Table x has the following column duplicated: x.  Please rename or #> remove and try again. #> Error in `check_xy()`: #> ! wrong input specification  joyn_msg(\"err\") #> ✖ Error:  Table x has the following column duplicated: x.  Please rename or #> remove and try again. joyn(x = x1, y=y1, by=\"id\", match_type = \"1:1\") #> ✖ Error: table x is not uniquely identified by id #> Duplicate counts in x: #>        id copies percent #>    <char>  <int>  <char> #> 1:      1      2     40% #> 2:  total      5    100% #> Error in `check_match_type()`: #> ! match type inconsistency #> ℹ refer to the duplicate counts in the table(s) above to identify where the #>   issue occurred joyn_msg(\"err\") #> ✖ Error: table x is not uniquely identified by id"},{"path":"https://randrescastaneda.github.io/joyn/articles/messages.html","id":"additional-how-to-visualize-joyn-messages","dir":"Articles","previous_headings":"","what":"Additional: How to visualize joyn messages?","title":"Messages","text":"joyn stores messages joyn environment. order print , can use joyn_msg() function. msg_type argument allows specify certain type message like visualize, , want displayed, can just set type = ''","code":"# Execute a join   joyn(x = x1,       y = y1,       match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y  # Print all messages stored joyn_msg(msg_type = \"all\") #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ● Timing:The full joyn is executed in 0.000321 seconds. #> ● Timing: The entire joyn function, including checks, is executed in 0.050597 #> seconds.  # Print info messages only  joyn_msg(msg_type = \"info\") #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y"},{"path":"https://randrescastaneda.github.io/joyn/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R.Andres Castaneda. Author, maintainer. Zander Prinsloo. Author. Rossana Tatulli. Author.","code":""},{"path":"https://randrescastaneda.github.io/joyn/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Castaneda R, Prinsloo Z, Tatulli R (2024). joyn: Tool Diagnosis Tables Joins Complementary Join Features. R package version 0.2.3, https://randrescastaneda.github.io/joyn/, https://github.com/randrescastaneda/joyn.","code":"@Manual{,   title = {joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features},   author = {R.Andres Castaneda and Zander Prinsloo and Rossana Tatulli},   year = {2024},   note = {R package version 0.2.3, https://randrescastaneda.github.io/joyn/},   url = {https://github.com/randrescastaneda/joyn}, }"},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"joyn","dir":"","previous_headings":"","what":"An R package for joining tables","title":"An R package for joining tables","text":"joyn empowers assess results joining data frames, making easier efficient combine tables. Similar philosophy merge command Stata, joyn offers matching key variables detailed join reports ensure accurate insightful results.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"An R package for joining tables","text":"Merging tables R can tricky. Ensuring accuracy understanding joined data fully can tedious tasks. ’s joyn comes . Inspired Stata’s informative approach merging, joyn makes process smoother insightful. standard R merge functions powerful, often lack features like assessing join accuracy, detecting potential issues, providing detailed reports. joyn fills gap offering: Intuitive join handling: Whether ’re dealing one--one, one--many, many--many relationships, joyn helps navigate confidently. Informative reports: Get clear insights join process helpful reports identify duplicate observations, missing values, potential inconsistencies.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"what-makes-joyn-special","dir":"","previous_headings":"","what":"What makes joyn special?","title":"An R package for joining tables","text":"standard R merge functions offer basic functionality, joyn goes beyond providing comprehensive tools features tailored data joining needs: 1. Flexibility join types: Choose ideal join type (“left”, “right”, “inner”) keep argument. Unlike R’s default, joyn performs full join default, ensuring observations included, full control tailor results. 2. Seamless variable handling: wrestling duplicate variable names! joyn offers multiple options: Update values: Use update_values update_NA automatically update conflicting variables left table values right table. Keep (different names): Enable keep_common_vars = TRUE retain variables, unique suffix. Selective inclusion: Choose specific variables right table y_vars_to_keep, ensuring get data need. 3. Relationship awareness: joyn recognizes one--one, one--many, many--one, many--many relationships tables. defaults many--many compatibility, remember often ideal. Always specify correct relationship using arguments accurate meaningful results. 4. Join success glance: Get instant feedback join automatically generated reporting variable. Identify potential issues like unmatched observations missing values ensure data integrity informed decision-making. addressing common pain points offering enhanced flexibility, joyn empowers confidently effectively join data frames, paving way deeper insights data-driven success.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"the-cost-of-reliability","dir":"","previous_headings":"Performance and flexibility","what":"The cost of Reliability","title":"An R package for joining tables","text":"raw speed essential, understanding joins every step way equally crucial. joyn prioritizes providing insightful information preventing errors solely focusing speed. Unlike functions, adds: Meticulous checks: joyn performs comprehensive checks ensure join accurate avoids potential missteps, like unmatched observations missing values. Detailed reporting: Get clear picture join dedicated report, highlighting issues aware . User-friendly summary: Quickly grasp join’s outcome concise overview presented clear table. valuable features contribute slightly slower performance compared functions like data.table::merge.data.table() collapse::join(). However, benefits preventing errors gaining invaluable insights far outweigh minor speed difference.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"know-your-needs-choose-your-tool","dir":"","previous_headings":"Performance and flexibility","what":"Know your needs, choose your tool","title":"An R package for joining tables","text":"Speed top priority massive datasets? Consider using data.table collapse directly. Seek clear understanding error prevention joins? joyn trusted guide.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"protective-by-design","dir":"","previous_headings":"Performance and flexibility","what":"Protective by design","title":"An R package for joining tables","text":"joyn intentionally restricts certain actions provides clear messages encountering unexpected data configurations. might seem opinionated, ’s designed protect accidentally creating inaccurate misleading joins. “safety net” empowers confidently merge data, knowing joyn back.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"flexibility","dir":"","previous_headings":"Performance and flexibility","what":"Flexibility","title":"An R package for joining tables","text":"Currently, joyn focuses common valuable join types. Future development might explore expanding flexibility based user needs feedback.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"joyn-as-wrapper-familiar-syntax-familiar-power","dir":"","previous_headings":"","what":"joyn as wrapper: Familiar Syntax, Familiar Power","title":"An R package for joining tables","text":"joyn::join() offers core functionality Stata-inspired arguments, might prefer syntax aligned existing workflow. joyn covered! Embrace base R data.table: joyn::merge(): Leverage familiar base R data.table syntax seamless integration existing code. Join flair using dplyr: joyn::{dplyr verbs}(): Enjoy intuitive verb-based syntax dplyr powerful expressive way perform joins. Dive deeper: Explore corresponding vignettes unlock full potential alternative interfaces find perfect fit data manipulation style.","code":""},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for joining tables","text":"can install stable version joyn CRAN : development version GitHub :","code":"install.packages(\"joyn\") # install.packages(\"devtools\") devtools::install_github(\"randrescastaneda/joyn\")"},{"path":"https://randrescastaneda.github.io/joyn/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"An R package for joining tables","text":"","code":"library(joyn) #>  #> Attaching package: 'joyn' #> The following object is masked from 'package:base': #>  #>     merge library(data.table) #> Warning: package 'data.table' was built under R version 4.4.2  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15)  y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16))   x2 = data.table(id = c(1, 4, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))   y2 = data.table(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20))  # using common variable `id` as key. joyn(x = x1,       y = y1,      match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x #> 6:     4    NA    NA    16      y  # keep just those observations that match joyn(x = x1,       y = y1,       match_type = \"m:1\",      keep = \"inner\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y  # Bad merge for not specifying by argument joyn(x = x2,       y = y2,      match_type = \"1:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 4   44.4% #> 2     y 4   44.4% #> 3 x & y 1   11.1% #> 4 total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id and x from id, yd, y, and x #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA    NA    NA      x #> 4:     3     2    NA    NA    NA      x #> 5:    NA    NA    15    NA    NA      x #> 6:     2    NA    17     2    15      y #> 7:     5    NA    18     5    20      y #> 8:     6    NA    19     6    13      y #> 9:     3    NA    20     3    10      y  # good merge, ignoring variable x from y joyn(x = x2,       y = y2,      by = \"id\",      match_type = \"1:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     4     2    12    NA    NA      x #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y  # update NAs in var x in table x from var x in y joyn(x = x2,       y = y2,       by = \"id\",       update_NAs = TRUE) #>  #> ── JOYn Report ── #>  #>         .joyn     n percent #>        <char> <int>  <char> #> 1:          x     2   28.6% #> 2:      x & y     1   14.3% #> 3: NA updated     4   57.1% #> 4:      total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y      .joyn #>    <num> <int> <num> <num> <int>     <fctr> #> 1:     1     1    16     1    11      x & y #> 2:     4     2    12    NA    NA          x #> 3:     2     1    17     2    15 NA updated #> 4:     3     2    20     3    10 NA updated #> 5:    NA    NA    15    NA    NA          x #> 6:     5    NA    18     5    20 NA updated #> 7:     6    NA    19     6    13 NA updated  # update values in var x in table x from var x in y joyn(x = x2,       y = y2,       by = \"id\",       update_values = TRUE) #>  #> ── JOYn Report ── #>  #>            .joyn     n percent #>           <char> <int>  <char> #> 1:    NA updated     4   57.1% #> 2: value updated     1   14.3% #> 3:   not updated     2   28.6% #> 4:         total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y         .joyn #>    <num> <int> <num> <num> <int>        <fctr> #> 1:     1     1    16     1    11 value updated #> 2:     4     2    12    NA    NA   not updated #> 3:     2     1    17     2    15    NA updated #> 4:     3     2    20     3    10    NA updated #> 5:    NA    NA    15    NA    NA   not updated #> 6:     5    NA    18     5    20    NA updated #> 7:     6    NA    19     6    13    NA updated   # do not bring any variable from y into x, just the report joyn(x = x2,       y = y2,       by = \"id\",       y_vars_to_keep = NULL) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   28.6% #> 2     y 2   28.6% #> 3 x & y 3   42.9% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #>       id     t     x  .joyn #>    <num> <int> <num> <fctr> #> 1:     1     1    16  x & y #> 2:     4     2    12      x #> 3:     2     1    NA  x & y #> 4:     3     2    NA  x & y #> 5:    NA    NA    15      x #> 6:     5    NA    NA      y #> 7:     6    NA    NA      y"},{"path":"https://randrescastaneda.github.io/joyn/reference/anti_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Anti join on two data frames — anti_join","title":"Anti join on two data frames — anti_join","text":"joyn wrapper works similar fashion dplyr::anti_join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/anti_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Anti join on two data frames — anti_join","text":"","code":"anti_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   relationship = \"many-to-many\",   y_vars_to_keep = FALSE,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/anti_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Anti join on two data frames — anti_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars msg_type character: type messages display default na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/anti_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Anti join on two data frames — anti_join","text":"data frame class x. properties output close possible ones returned dplyr alternative.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/anti_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Anti join on two data frames — anti_join","text":"","code":"# Simple anti join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) anti_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2    100% #> 2     y 1     50% #> 3 total 2    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #>       id     t     x  .joyn #>    <num> <int> <int> <fctr> #> 1:     3     2    14      x #> 2:    NA    NA    15      x"},{"path":"https://randrescastaneda.github.io/joyn/reference/arguments_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform necessary preliminary checks on arguments that are passed to joyn — arguments_checks","title":"Perform necessary preliminary checks on arguments that are passed to joyn — arguments_checks","text":"Perform necessary preliminary checks arguments passed joyn","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/arguments_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform necessary preliminary checks on arguments that are passed to joyn — arguments_checks","text":"","code":"arguments_checks(   x,   y,   by,   copy,   keep,   suffix,   na_matches,   multiple,   relationship,   reportvar )"},{"path":"https://randrescastaneda.github.io/joyn/reference/arguments_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform necessary preliminary checks on arguments that are passed to joyn — arguments_checks","text":"x data frame: left table y data frame: right table character vector variables join copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/arguments_checks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform necessary preliminary checks on arguments that are passed to joyn — arguments_checks","text":"list checked arguments pass main joyn function","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_by_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Check by input — check_by_vars","title":"Check by input — check_by_vars","text":"function checks variable name(s) used key(s) join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_by_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check by input — check_by_vars","text":"","code":"check_by_vars(by, x, y)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_by_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check by input — check_by_vars","text":"vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. x, y data tables. y coerced data.table one already.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_by_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check by input — check_by_vars","text":"list information variables","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_by_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check by input — check_by_vars","text":"","code":"if (FALSE) { # \\dontrun{ x1 = data.frame(        id = c(1L, 1L, 2L, 3L, NA_integer_),        t  = c(1L, 2L, 1L, 2L, NA_integer_),        x  = 11:15) y1 = data.frame(id = 1:2,                 y  = c(11L, 15L)) # With var \"id\" shared in x and y joyn:::check_by_vars(by = \"id\", x = x1, y = y1) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_dt_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Check dt by vars — check_dt_by","title":"Check dt by vars — check_dt_by","text":"check variable(s) data frames joined: either single var, common right left dt, ","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_dt_by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check dt by vars — check_dt_by","text":"","code":"check_dt_by(x, y, by, by.x, by.y)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_dt_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check dt by vars — check_dt_by","text":"x left table y right table character: variable join (common variable x y) .x character: specified var x join .y character: specified var y join ","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_dt_by.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check dt by vars — check_dt_by","text":"character specifying checked variable(s) join ","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_dt_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check dt by vars — check_dt_by","text":"","code":"if (FALSE) { # \\dontrun{ x = data.table(id1 = c(1, 1, 2, 3, 3),                id2 = c(1, 1, 2, 3, 4),                t   = c(1L, 2L, 1L, 2L, NA_integer_),                x   = c(16, 12, NA, NA, 15)) y = data.table(id  = c(1, 2, 5, 6, 3),                id2 = c(1, 1, 2, 3, 4),                y   = c(11L, 15L, 20L, 13L, 10L),                x   = c(16:20)) # example specifying by.x and by.y joyn:::check_dt_by(x, y, by.x = \"id1\", by.y = \"id2\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_duplicate_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if vars in dt have duplicate names — check_duplicate_names","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"Check vars dt duplicate names","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_duplicate_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"","code":"check_duplicate_names(dt, name)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_duplicate_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"dt data.frame check name var name check duplicates dt","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_duplicate_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"logical either TRUE, duplicates found, FALSE otherwise","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_duplicate_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if vars in dt have duplicate names — check_duplicate_names","text":"","code":"if (FALSE) { # \\dontrun{ # When no duplicates x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) joyn:::check_duplicate_names(x1, \"x\")  # When duplicates x1_duplicates = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                            x  = c(1L, 2L, 1L, 2L, NA_integer_),                            x  = 11:15,                            check.names = FALSE) joyn:::check_duplicate_names(x1_duplicates, \"x\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_match_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Check match type consistency — check_match_type","title":"Check match type consistency — check_match_type","text":"function checks match type chosen user consistent data. (Match type must one valid types: \"1:1\", \"1:m\", \"m:1\", \"m:m\")","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_match_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check match type consistency — check_match_type","text":"","code":"check_match_type(x, y, by, match_type, verbose = getOption(\"joyn.verbose\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_match_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check match type consistency — check_match_type","text":"x, y data tables. y coerced data.table one already. vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections).","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_match_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check match type consistency — check_match_type","text":"character vector split_match_type","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_match_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check match type consistency — check_match_type","text":"","code":"if (FALSE) { # \\dontrun{ # Consistent match type x1 = data.frame(        id = c(1L, 1L, 2L, 3L, NA_integer_),        t  = c(1L, 2L, 1L, 2L, NA_integer_),        x  = 11:15) y1 = data.frame(id = 1:2,                 y  = c(11L, 15L)) joyn:::check_match_type(x = x1, y=y1, by=\"id\", match_type = \"m:1\")  # Inconsistent match type joyn:::check_match_type(x = x1, y=y1, by=\"id\", match_type = \"1:1\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_new_y_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename vars in y so they are different to x's when joined — check_new_y_vars","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"Check vars y names vars x, return new variables names y vars joined data frame","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_new_y_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"","code":"check_new_y_vars(x, by, y_vars_to_keep)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_new_y_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"x master table character: vars y_vars_to_keep character vector y variables keep","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_new_y_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"vector new variable names y","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_new_y_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename vars in y so they are different to x's when joined — check_new_y_vars","text":"","code":"if (FALSE) { # \\dontrun{ y2 = data.frame(id = c(1, 2, 5, 6, 3),                 yd = c(1, 2, 5, 6, 3),                 y  = c(11L, 15L, 20L, 13L, 10L),                 x  = c(16:20)) joyn:::y_vars_to_keep <- check_y_vars_to_keep(TRUE, y2, by = \"id\") x2 = data.frame(id = c(1, 1, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15)) joyn:::check_new_y_vars(x = x2, by=\"id\", y_vars_to_keep) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_reportvar.html","id":null,"dir":"Reference","previous_headings":"","what":"Check reporting variable — check_reportvar","title":"Check reporting variable — check_reportvar","text":"check reportvar input  resulting data frame reporting variable (storing joyn's report), check return valid name.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_reportvar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check reporting variable — check_reportvar","text":"","code":"check_reportvar(reportvar, verbose = getOption(\"joyn.verbose\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_reportvar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check reporting variable — check_reportvar","text":"input reportvar character, return valid name report var. NULL FALSE, return NULL.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_reportvar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check reporting variable — check_reportvar","text":"","code":"if (FALSE) { # \\dontrun{ # When null - reporting variable not returned in merged dt joyn:::check_reportvar(reportvar = NULL) # When FALSE - reporting variable not returned in merged dt joyn:::check_reportvar(reportvar = FALSE) # When character joyn:::check_reportvar(reportvar = \".joyn\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_unmatched_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct all unmatched keys checks and return error if necessary — check_unmatched_keys","title":"Conduct all unmatched keys checks and return error if necessary — check_unmatched_keys","text":"Conduct unmatched keys checks return error necessary","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_unmatched_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct all unmatched keys checks and return error if necessary — check_unmatched_keys","text":"","code":"check_unmatched_keys(x, y, out, by, jn_type)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_unmatched_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct all unmatched keys checks and return error if necessary — check_unmatched_keys","text":"x left table y right table output join character vector keys x y joined jn_type character: \"left\", \"right\", \"inner\"","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_unmatched_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct all unmatched keys checks and return error if necessary — check_unmatched_keys","text":"error message","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_xy.html","id":null,"dir":"Reference","previous_headings":"","what":"Check tables X and Y — check_xy","title":"Check tables X and Y — check_xy","text":"function performs checks inspired merge.data.table: detects errors x /y columns x /y contain duplicate column names","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_xy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check tables X and Y — check_xy","text":"","code":"check_xy(x, y)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_xy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check tables X and Y — check_xy","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_xy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check tables X and Y — check_xy","text":"invisible TRUE","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_xy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check tables X and Y — check_xy","text":"","code":"if (FALSE) { # \\dontrun{ # Check passing with no errors library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) joyn:::check_xy(x = x1, y=y1) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_y_vars_to_keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"check return variable names y keep returning table, excluding keys merge","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_y_vars_to_keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"","code":"check_y_vars_to_keep(y_vars_to_keep, y, by)"},{"path":"https://randrescastaneda.github.io/joyn/reference/check_y_vars_to_keep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"y_vars_to_keep either TRUE, keep vars y; FALSE NULL, keep vars; character vector specifying variables y keep y data frame vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_y_vars_to_keep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"character vector variable names y table","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/check_y_vars_to_keep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check variables in y that will be kept in returning table — check_y_vars_to_keep","text":"","code":"if (FALSE) { # \\dontrun{ y1 = data.table(id = 1:2,                y  = c(11L, 15L)) # With y_vars_to_keep TRUE joyn:::check_y_vars_to_keep(TRUE, y1, by = \"id\") # With y_vars_to_keep FALSE joyn:::check_y_vars_to_keep(FALSE, y1, by = \"id\") # Specifying which y vars to keep joyn:::check_y_vars_to_keep(\"y\", y1, by = \"id\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/clear_joynenv.html","id":null,"dir":"Reference","previous_headings":"","what":"Clearing joyn environment — clear_joynenv","title":"Clearing joyn environment — clear_joynenv","text":"Clearing joyn environment","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/clear_joynenv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clearing joyn environment — clear_joynenv","text":"","code":"clear_joynenv()"},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/clear_joynenv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clearing joyn environment — clear_joynenv","text":"","code":"if (FALSE) { # \\dontrun{ # Storing a message joyn:::store_msg(\"info\", \"simple message\")  # Clearing the environment joyn:::clear_joynenv()  # Checking it does not exist in the environment print(joyn:::joyn_msgs_exist()) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/correct_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Function used to correct names in input data frames using by argument — correct_names","title":"Function used to correct names in input data frames using by argument — correct_names","text":"Function used correct names input data frames using argument","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/correct_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function used to correct names in input data frames using by argument — correct_names","text":"","code":"correct_names(by, x, y, order = TRUE)"},{"path":"https://randrescastaneda.github.io/joyn/reference/correct_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function used to correct names in input data frames using by argument — correct_names","text":"argument parsed higher level function x left data frame y right data frame","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/correct_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function used to correct names in input data frames using by argument — correct_names","text":"list","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/create_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Create variables that uniquely identify rows in a data table — create_ids","title":"Create variables that uniquely identify rows in a data table — create_ids","text":"function generates unique identifier columns given number rows, based specified number identifier variables.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/create_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create variables that uniquely identify rows in a data table — create_ids","text":"","code":"create_ids(n_rows, n_ids, prefix = \"id\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/create_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create variables that uniquely identify rows in a data table — create_ids","text":"n_rows integer specifying number rows data table unique identifiers need generated. n_ids integer specifying number identifiers created. n_ids 1, simple sequence unique IDs created. greater 1, combination IDs generated. prefix character string specifying prefix identifier variable names (default \"id\").","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/create_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create variables that uniquely identify rows in a data table — create_ids","text":"named list element vector representing unique identifier column. number elements list corresponds number identifier variables (n_ids). length element equal n_rows.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/freq_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Tabulate simple frequencies — freq_table","title":"Tabulate simple frequencies — freq_table","text":"tabulate one variable frequencies","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/freq_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tabulate simple frequencies — freq_table","text":"","code":"freq_table(x, byvar, digits = 1, na.rm = FALSE, freq_var_name = \"n\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/freq_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tabulate simple frequencies — freq_table","text":"x data frame byvar character: name variable tabulate. Use Standard evaluation. digits numeric: number decimal places display. Default 1. na.rm logical: report NA values frequencies. Default FALSE. freq_var_name character: name frequency variable. Default \"n\"","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/freq_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tabulate simple frequencies — freq_table","text":"data.table frequencies.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/freq_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tabulate simple frequencies — freq_table","text":"","code":"library(data.table) x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) freq_table(x4, \"id1\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/full_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Full join two data frames — full_join","title":"Full join two data frames — full_join","text":"joyn wrapper works similar fashion dplyr::full_join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/full_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full join two data frames — full_join","text":"","code":"full_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/full_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full join two data frames — full_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars msg_type character: type messages display default na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/full_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full join two data frames — full_join","text":"data frame class x. properties output close possible ones returned dplyr alternative.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/full_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full join two data frames — full_join","text":"","code":"# Simple full join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) full_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   33.3% #> 2     y 1   16.7% #> 3 x & y 3     50% #> 4 total 6    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:     4    NA    NA    16      y #> 6:    NA    NA    15    NA      x"},{"path":"https://randrescastaneda.github.io/joyn/reference/get_joyn_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Get joyn options — get_joyn_options","title":"Get joyn options — get_joyn_options","text":"function aims display store info joyn options","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/get_joyn_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get joyn options — get_joyn_options","text":"","code":"get_joyn_options(env = .joynenv, display = TRUE, option = NULL)"},{"path":"https://randrescastaneda.github.io/joyn/reference/get_joyn_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get joyn options — get_joyn_options","text":"env environment, joyn environment default display logical, TRUE displays (.e., print) info joyn options corresponding default current values option character NULL. character, name specific joyn option. NULL, joyn options","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/get_joyn_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get joyn options — get_joyn_options","text":"joyn options values invisibly list","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/get_joyn_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get joyn options — get_joyn_options","text":"","code":"if (FALSE) { # \\dontrun{  # display all joyn options, their default and current values joyn:::get_joyn_options()  # store list of option = value pairs AND do not display info joyn_options <- joyn:::get_joyn_options(display = FALSE)  # get info on one specific option and store it joyn.verbose <- joyn:::get_joyn_options(option = \"joyn.verbose\")  # get info on two specific option joyn:::get_joyn_options(option = c(\"joyn.verbose\", \"joyn.reportvar\"))  } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/inner_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Inner join two data frames — inner_join","title":"Inner join two data frames — inner_join","text":"joyn wrapper works similar fashion dplyr::inner_join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/inner_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inner join two data frames — inner_join","text":"","code":"inner_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/inner_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inner join two data frames — inner_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars msg_type character: type messages display default na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/inner_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inner join two data frames — inner_join","text":"data frame class x. properties output close possible ones returned dplyr alternative.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/inner_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inner join two data frames — inner_join","text":"","code":"# Simple full join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) inner_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_balanced.html","id":null,"dir":"Reference","previous_headings":"","what":"Is data frame balanced by group? — is_balanced","title":"Is data frame balanced by group? — is_balanced","text":"Check data frame balanced group columns, .e., contains every combination elements specified variables","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_balanced.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is data frame balanced by group? — is_balanced","text":"","code":"is_balanced(df, by, return = c(\"logic\", \"table\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_balanced.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is data frame balanced by group? — is_balanced","text":"df data frame character: variables used check df balanced return character: either \"logic\" \"table\". \"logic\", returns TRUE FALSE depending whether data frame balanced. \"table\" returns unbalanced observations - .e. combinations elements specified variables found input df","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_balanced.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is data frame balanced by group? — is_balanced","text":"logical, return == \"logic\", else returns data frame unbalanced observations","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_balanced.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is data frame balanced by group? — is_balanced","text":"","code":"x1 = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) is_balanced(df = x1,             by = c(\"id\", \"t\"),             return = \"table\") # returns combination of elements in \"id\" and \"t\" not present in df #>   id t #> 1  3 1 #> 2  2 2 is_balanced(df = x1,             by = c(\"id\", \"t\"),             return = \"logic\") # FALSE #> [1] FALSE"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if dt is uniquely identified by by variable — is_id","title":"Check if dt is uniquely identified by by variable — is_id","text":"report dt uniquely identified var , report = TRUE, duplicates variable","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if dt is uniquely identified by by variable — is_id","text":"","code":"is_id(   dt,   by,   verbose = getOption(\"joyn.verbose\", default = FALSE),   return_report = FALSE )"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if dt is uniquely identified by by variable — is_id","text":"dt either right left table variable merge verbose logical: TRUE messages displayed return_report logical: TRUE, returns data summary duplicates. FALSE, returns logical value depending whether dt uniquely identified ","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if dt is uniquely identified by by variable — is_id","text":"logical data.frame, depending value argument return_report","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if dt is uniquely identified by by variable — is_id","text":"","code":"library(data.table)  # example with data frame not uniquely identified by `by` var  y <- data.table(id = c(\"c\",\"b\", \"c\", \"a\"),                  y  = c(11L, 15L, 18L, 20L)) is_id(y, by = \"id\") #> ! Duplicates found by: `id` #> [1] FALSE is_id(y, by = \"id\", return_report = TRUE) #> ! Duplicates found by: `id` #>  #> ── Duplicates in terms of `id`  #>        id copies percent #>    <char>  <int>  <char> #> 1:      c      2     50% #> 2:  total      4    100% #> ─────────────────────────────────────────────────────── End of is_id() report ──  # example with data frame uniquely identified by `by` var  y1 <- data.table(id = c(\"1\",\"3\", \"2\", \"9\"),                  y  = c(11L, 15L, 18L, 20L)) is_id(y1, by = \"id\") #> ✔ No duplicates found by `id` #> [1] TRUE"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_match_type_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Confirm if match type error — is_match_type_error","title":"Confirm if match type error — is_match_type_error","text":"Confirm match type error","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_match_type_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confirm if match type error — is_match_type_error","text":"","code":"is_match_type_error(x, name, by, verbose, match_type_error)"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_match_type_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confirm if match type error — is_match_type_error","text":"name name data frame vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. match_type_error logical: existing code","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_match_type_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confirm if match type error — is_match_type_error","text":"logical","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_match_type_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confirm if match type error — is_match_type_error","text":"","code":"if (FALSE) { # \\dontrun{ # example with dt not uniquely identified by \"id\" x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) joyn:::is_match_type_error(x1, name = \"x1\", by = \"id\") } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_valid_m_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether specified ","title":"Check whether specified ","text":"\"many\" relationship specified, check valid.  (Specified many relationship valid dt instead uniquely identified specified keys)","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_valid_m_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether specified ","text":"","code":"is_valid_m_key(dt, by)"},{"path":"https://randrescastaneda.github.io/joyn/reference/is_valid_m_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether specified ","text":"dt data object character vector: specified keys, already fixed","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_valid_m_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether specified ","text":"logical: TRUE valid, FALSE uniquely identified","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/is_valid_m_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether specified ","text":"","code":"if (FALSE) { # \\dontrun{ # example with data frame uniquely identified by specified `by` vars x1 = data.frame(id  = c(1L, 1L, 2L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15)  joyn:::is_valid_m_key(x1, by = c(\"id\", \"t\")) # example with valid specified \"many\" relationship x2 = data.frame(id  = c(1L, 1L, 1L, 3L, NA_integer_),                  t  = c(1L, 2L, 1L, 2L, NA_integer_),                  x  = 11:15) joyn:::is_valid_m_key(x2, by = c(\"id\", \"t\")) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn-package.html","id":null,"dir":"Reference","previous_headings":"","what":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","title":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","text":"Tool diagnosing table joins. combines speed `collapse` `data.table`, flexibility `dplyr`, diagnosis features `merge` command `Stata`.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"joyn: Tool for Diagnosis of Tables Joins and Complementary Join Features — joyn-package","text":"Maintainer: R.Andres Castaneda acastanedaa@worldbank.org Authors: Zander Prinsloo zprinsloo@worldbank.org Rossana Tatulli rtatulli@worldbank.org","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":null,"dir":"Reference","previous_headings":"","what":"Join two tables — joyn","title":"Join two tables — joyn","text":"primary function joyn package. executes full join, performs number checks, filters allow user-specified join.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join two tables — joyn","text":"","code":"joyn(   x,   y,   by = intersect(names(x), names(y)),   match_type = c(\"1:1\", \"1:m\", \"m:1\", \"m:m\"),   keep = c(\"full\", \"left\", \"master\", \"right\", \"using\", \"inner\", \"anti\"),   y_vars_to_keep = ifelse(keep == \"anti\", FALSE, TRUE),   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = FALSE,   verbose = getOption(\"joyn.verbose\"),   suffixes = getOption(\"joyn.suffixes\"),   allow.cartesian = deprecated(),   yvars = deprecated(),   keep_y_in_x = deprecated(),   na.last = getOption(\"joyn.na.last\"),   msg_type = getOption(\"joyn.msg_type\") )"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join two tables — joyn","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). keep atomic character vector length 1: One \"full\", \"left\", \"master\", \"right\", \"using\", \"inner\". Default \"full\". Even though regular behavior joins R, objective joyn present diagnosis join requires full join. default full join. Yet, \"left\" \"master\", keeps observations matched tables ones match x. ones y discarded. \"right\" \"using\", keeps observations matched tables ones match y. ones x discarded. \"inner\", keeps observations matched tables. Note , example, keep = \"left\", joyn()function still executes full join hood filters rows output table left join. behaviour, inefficient, allows diagnostics checks conducted byjoyn`. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE. msg_type character: type messages display default","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join two tables — joyn","text":"data.table joining x y.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"match-types","dir":"Reference","previous_headings":"","what":"match types","title":"Join two tables — joyn","text":"Using wording Stata manual 1:1: specifies one--one match merge. variables specified  uniquely identify single observations table. 1:m m:1: specify one--many many--one match merges, respectively. means tables observations uniquely identify variables , table many (two )  observations identify variables m:m refers many--many merge. variables uniquely identify observations either table. Matching performed combining observations equal values ; within matching values, first observation master (.e. left x) table matched first matching observation using (.e. right y) table; second, second; . unequal number observations within group, last observation shorter group used repeatedly match subsequent observations longer group.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"reporttype","dir":"Reference","previous_headings":"","what":"reporttype","title":"Join two tables — joyn","text":"reporttype = \"numeric\", numeric values following meaning: 1: row comes x, .e. \"x\" 2: row comes y, .e. \"y\" 3: row x y, .e. \"x & y\" 4: row NA x updated y, .e. \"NA updated\" 5: row valued x updated y, .e. \"value updated\" 6: row x updated, .e. \"updated\"","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"nas-order","dir":"Reference","previous_headings":"","what":"NAs order","title":"Join two tables — joyn","text":"NAs placed either first last resulting data.frame depending value getOption(\"joyn.na.last\"). Default FALSE default value data.table::setorderv.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Join two tables — joyn","text":"","code":"# Simple join library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t  = c(1L, 2L, 1L, 2L, NA_integer_), x  = 11:15)  y1 = data.table(id = 1:2,                 y  = c(11L, 15L))  x2 = data.table(id = c(1, 1, 2, 3, NA),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = c(16, 12, NA, NA, 15))  y2 = data.table(id = c(1, 2, 5, 6, 3),               yd = c(1, 2, 5, 6, 3),               y  = c(11L, 15L, 20L, 13L, 10L),               x  = c(16:20)) joyn(x1, y1, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2 x & y 3     60% #> 3 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <int> <int> <int> <int> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x  # Bad merge for not specifying by argument or match_type joyn(x2, y2) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 4   44.4% #> 2     y 4   44.4% #> 3 x & y 1   11.1% #> 4 total 9    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id and x from id, yd, y, and x #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     1     2    12    NA    NA      x #> 3:     2     1    NA    NA    NA      x #> 4:     3     2    NA    NA    NA      x #> 5:    NA    NA    15    NA    NA      x #> 6:     2    NA    17     2    15      y #> 7:     5    NA    18     5    20      y #> 8:     6    NA    19     6    13      y #> 9:     3    NA    20     3    10      y  # good merge, ignoring variable x from y joyn(x2, y2, by = \"id\", match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 1   14.3% #> 2     y 2   28.6% #> 3 x & y 4   57.1% #> 4 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y  .joyn #>    <num> <int> <num> <num> <int> <fctr> #> 1:     1     1    16     1    11  x & y #> 2:     1     2    12     1    11  x & y #> 3:     2     1    NA     2    15  x & y #> 4:     3     2    NA     3    10  x & y #> 5:    NA    NA    15    NA    NA      x #> 6:     5    NA    NA     5    20      y #> 7:     6    NA    NA     6    13      y  # update NAs in x variable form x joyn(x2, y2, by = \"id\", update_NAs = TRUE, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>         .joyn     n percent #>        <char> <int>  <char> #> 1:          x     1   14.3% #> 2:      x & y     2   28.6% #> 3: NA updated     4   57.1% #> 4:      total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y      .joyn #>    <num> <int> <num> <num> <int>     <fctr> #> 1:     1     1    16     1    11      x & y #> 2:     1     2    12     1    11      x & y #> 3:     2     1    17     2    15 NA updated #> 4:     3     2    20     3    10 NA updated #> 5:    NA    NA    15    NA    NA          x #> 6:     5    NA    18     5    20 NA updated #> 7:     6    NA    19     6    13 NA updated  # Update values in x with variables from y joyn(x2, y2, by = \"id\", update_values = TRUE, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>            .joyn     n percent #>           <char> <int>  <char> #> 1:    NA updated     4   57.1% #> 2: value updated     2   28.6% #> 3:   not updated     1   14.3% #> 4:         total     7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id, yd, y, and x #>       id     t     x    yd     y         .joyn #>    <num> <int> <num> <num> <int>        <fctr> #> 1:     1     1    16     1    11 value updated #> 2:     1     2    16     1    11 value updated #> 3:     2     1    17     2    15    NA updated #> 4:     3     2    20     3    10    NA updated #> 5:    NA    NA    15    NA    NA   not updated #> 6:     5    NA    18     5    20    NA updated #> 7:     6    NA    19     6    13    NA updated"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"display type of joyn message — joyn_msg","title":"display type of joyn message — joyn_msg","text":"display type joyn message","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"display type of joyn message — joyn_msg","text":"","code":"joyn_msg(msg_type = getOption(\"joyn.msg_type\"), msg = NULL)"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"display type of joyn message — joyn_msg","text":"msg_type character: one following: , basic, info, note, warn, timing, err msg character vector parsed cli::cli_abort(). Default NULL. works \"err\" %% msg_type. internal argument.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"display type of joyn message — joyn_msg","text":"returns data frame message invisibly. print message console","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"display type of joyn message — joyn_msg","text":"","code":"library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t  = c(1L, 2L, 1L, 2L, NA_integer_), x  = 11:15)  y1 = data.table(id = 1:2,                 y  = c(11L, 15L)) df <- joyn(x1, y1, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2 x & y 3     60% #> 3 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y joyn_msg(\"basic\") #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y joyn_msg(\"all\") #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ● Timing:The full joyn is executed in 0.000242 seconds. #> ● Timing: The entire joyn function, including checks, is executed in 0.023313 #> seconds."},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msgs_exist.html","id":null,"dir":"Reference","previous_headings":"","what":"Presence of joyn msgs in the environment — joyn_msgs_exist","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"Checks presence joyn messages stored joyn environment","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msgs_exist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"","code":"joyn_msgs_exist()"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_msgs_exist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Presence of joyn msgs in the environment — joyn_msgs_exist","text":"invisible TRUE","code":""},{"path":[]},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Print JOYn report table — joyn_report","title":"Print JOYn report table — joyn_report","text":"Print JOYn report table","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print JOYn report table — joyn_report","text":"","code":"joyn_report(verbose = getOption(\"joyn.verbose\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print JOYn report table — joyn_report","text":"verbose logical: FALSE, display message (programmer's option). Default TRUE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print JOYn report table — joyn_report","text":"invisible table frequencies","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print JOYn report table — joyn_report","text":"","code":"library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_), t  = c(1L, 2L, 1L, 2L, NA_integer_), x  = 11:15)  y1 = data.table(id = 1:2,                 y  = c(11L, 15L))  d <- joyn(x1, y1, match_type = \"m:1\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2 x & y 3     60% #> 3 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y joyn_report(verbose = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2 x & y 3     60% #> 3 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ──"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_workhorse.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","title":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","text":"Always executes full join.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_workhorse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","text":"","code":"joyn_workhorse(   x,   y,   by = intersect(names(x), names(y)),   sort = FALSE,   suffixes = getOption(\"joyn.suffixes\"),   reportvar = getOption(\"joyn.reportvar\") )"},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_workhorse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","text":"x data object, \"left\" \"master\" y data object, \"right\" \"using\" atomic character vector: key specifying join sort logical: sort result columns x y suffixes atomic character vector: give suffixes columns common ","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_workhorse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","text":"data object class x","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/joyn_workhorse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal workhorse join function, used in the back-end of joyn — joyn_workhorse","text":"","code":"if (FALSE) { # \\dontrun{ # Full join library(data.table) x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) joyn:::joyn_workhorse(x = x1, y=y1) } # }"},{"path":"https://randrescastaneda.github.io/joyn/reference/left_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Left join two data frames — left_join","title":"Left join two data frames — left_join","text":"joyn wrapper works similar fashion dplyr::left_join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/left_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left join two data frames — left_join","text":"","code":"left_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = NULL,   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/left_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left join two data frames — left_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars msg_type character: type messages display default na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/left_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left join two data frames — left_join","text":"data frame class x. properties output close possible ones returned dplyr alternative.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/left_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Left join two data frames — left_join","text":"","code":"# Simple left join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) left_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     40% #> 2     y 1     20% #> 3 x & y 2     40% #> 4 total 5    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     3     2    14    NA      x #> 5:    NA    NA    15    NA      x"},{"path":"https://randrescastaneda.github.io/joyn/reference/merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge two data frames — merge","title":"Merge two data frames — merge","text":"joyn wrapper works similar fashion base::merge data.table::merge, merge masks two.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge two data frames — merge","text":"","code":"merge(   x,   y,   by = NULL,   by.x = NULL,   by.y = NULL,   all = FALSE,   all.x = all,   all.y = all,   sort = TRUE,   suffixes = c(\".x\", \".y\"),   no.dups = TRUE,   allow.cartesian = getOption(\"datatable.allow.cartesian\"),   match_type = c(\"m:m\", \"m:1\", \"1:m\", \"1:1\"),   keep_common_vars = TRUE,   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge two data frames — merge","text":"x, y data tables. y coerced data.table one already. vector shared column names x y merge . defaults shared key columns two tables. y key columns, defaults key x. .x, .y Vectors column names x y merge . logical; = TRUE shorthand save setting .x = TRUE .y = TRUE. .x logical; TRUE, rows x matching row y included. rows 'NA's columns usually filled values y. default FALSE rows data x y included output. .y logical; analogous .x . sort logical. TRUE (default), rows merged data.table sorted setting key / .x columns. FALSE, unlike base R's merge row order unspecified, row order x retained (including retaining position missing entries .x=TRUE), followed y rows match x (.y=TRUE) retaining order appear y. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion merge.data.frame method . .dups logical indicating suffixes also appended non-.y column names y column name .x. allow.cartesian See allow.cartesian [.data.table. match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. ... Arguments passed joyn y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE verbose logical: FALSE, display message (programmer's option). Default TRUE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge two data frames — merge","text":"data.table merging x y","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge two data frames — merge","text":"","code":"x1 = data.frame(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.frame(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) joyn::merge(x1, y1, by = \"id\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2   66.7% #> 2     y 1   33.3% #> 3 total 3    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #> ⚠ Warning:  Supplied both by and by.x/by.y. by argument will be ignored. #> ⚠ Warning: The keys supplied uniquely identify y, therefore a m:1 join is #> executed #>   id t  x  y .joyn #> 1  1 1 11 11 x & y #> 2  1 2 12 11 x & y #> 3  2 1 13 15 x & y # example of using by.x and by.y x2 = data.frame(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) y2 = data.frame(id  = c(1, 2, 5, 6, 3),                 id2 = c(1, 1, 2, 3, 4),                 y   = c(11L, 15L, 20L, 13L, 10L),                 x   = c(16:20)) jn <- joyn::merge(x2,             y2,             match_type = \"m:m\",             all.x = TRUE,             by.x = \"id1\",             by.y = \"id2\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     y 1   14.3% #> 2 x & y 6   85.7% #> 3 total 7    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables keyby1 from id, keyby1, y, and x #> ⚠ Warning:  Supplied both by and by.x/by.y. by argument will be ignored. # example with all = TRUE jn <- joyn::merge(x2,             y2,             match_type = \"m:m\",             by.x = \"id1\",             by.y = \"id2\",             all = TRUE) #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     y 1   12.5% #> 2 x & y 7   87.5% #> 3 total 8    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables keyby1 from id, keyby1, y, and x #> ⚠ Warning:  Supplied both by and by.x/by.y. by argument will be ignored."},{"path":"https://randrescastaneda.github.io/joyn/reference/msg_type_dt.html","id":null,"dir":"Reference","previous_headings":"","what":"convert style of joyn message to data frame containing type and message — msg_type_dt","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"convert style joyn message data frame containing type message","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/msg_type_dt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"","code":"msg_type_dt(type, ...)"},{"path":"https://randrescastaneda.github.io/joyn/reference/msg_type_dt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert style of joyn message to data frame containing type and message — msg_type_dt","text":"data frame two variables, type msg","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Find possible unique identifies of data frame — possible_ids","title":"Find possible unique identifies of data frame — possible_ids","text":"Identify possible combinations variables  uniquely identifying dt","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"possible_ids(   dt,   vars = NULL,   exclude = NULL,   include = NULL,   exclude_classes = NULL,   include_classes = NULL,   verbose = getOption(\"possible_ids.verbose\", default = FALSE),   min_combination_size = 1,   max_combination_size = 5,   max_processing_time = 60,   max_numb_possible_ids = 100,   get_all = FALSE )"},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find possible unique identifies of data frame — possible_ids","text":"dt data frame vars character: vector variable names consider identifying unique combinations. exclude character: Names variables exclude analysis include character: Name variable included, might belong group excluded exclude exclude_classes character: classes exclude analysis (e.g., \"numeric\", \"integer\", \"date\") include_classes character: classes include analysis (e.g., \"numeric\", \"integer\", \"date\") verbose logical: FALSE message displayed. Default TRUE min_combination_size numeric: Min number combinations. Default 1, combinations. max_combination_size numeric. Max number combinations. Default 5. combinations identifiers larger max_combination_size, found max_processing_time numeric: Max time process seconds. , returns found. max_numb_possible_ids numeric: Max number possible IDs find. See details. get_all logical: get possible combinations based parameters .","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find possible unique identifies of data frame — possible_ids","text":"list possible identifiers","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":"number-of-possible-ids","dir":"Reference","previous_headings":"","what":"Number of possible IDs","title":"Find possible unique identifies of data frame — possible_ids","text":"number possible IDs dataframe large. , possible_ids() makes use heuristics return something useful without wasting time user. addition, provide multiple parameter user can fine tune search possible IDs easily quickly. Say instance dataframe 10 variables. Testing every possible pair variables give 90 possible unique identifiers dataframe. want test possible IDs, test 5000 combinations. dataframe many rows, may take .","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/possible_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find possible unique identifies of data frame — possible_ids","text":"","code":"library(data.table) x4 = data.table(id1 = c(1, 1, 2, 3, 3),                 id2 = c(1, 1, 2, 3, 4),                 t   = c(1L, 2L, 1L, 2L, NA_integer_),                 x   = c(16, 12, NA, NA, 15)) possible_ids(x4) #> ℹ Variables to test: id1, id2, t, and x #> [[1]] #> [1] \"id1\" \"t\"   #>  #> attr(,\"checked_ids\") #> [1] \"id1\" \"t\"   \"id2\" \"x\""},{"path":"https://randrescastaneda.github.io/joyn/reference/process_by_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Process the by vector — process_by_vector","title":"Process the by vector — process_by_vector","text":"Gives output vector names used specified table correspond argument table","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/process_by_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process the by vector — process_by_vector","text":"","code":"process_by_vector(by, input = c(\"left\", \"right\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/process_by_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process the by vector — process_by_vector","text":"character vector: argument join input character: either \"left\" \"right\", indicating whether give left right side equals (\"=\") equals part vector","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/process_by_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process the by vector — process_by_vector","text":"character vector","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/process_by_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process the by vector — process_by_vector","text":"","code":"joyn:::process_by_vector(by = c(\"An = foo\", \"example\"), input = \"left\") #> [1] \"An\"      \"example\""},{"path":"https://randrescastaneda.github.io/joyn/reference/rename_to_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename to syntactically valid names — rename_to_valid","title":"Rename to syntactically valid names — rename_to_valid","text":"Rename syntactically valid names","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/rename_to_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename to syntactically valid names — rename_to_valid","text":"","code":"rename_to_valid(name, verbose = getOption(\"joyn.verbose\"))"},{"path":"https://randrescastaneda.github.io/joyn/reference/rename_to_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename to syntactically valid names — rename_to_valid","text":"name character: name coerced syntactically valid name verbose logical: FALSE, display message (programmer's option). Default TRUE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/rename_to_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename to syntactically valid names — rename_to_valid","text":"valid character name","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/rename_to_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename to syntactically valid names — rename_to_valid","text":"","code":"joyn:::rename_to_valid(\"x y\") #> ℹ name x y is an invalid variable name. It will be changed to x.y #> [1] \"x.y\""},{"path":"https://randrescastaneda.github.io/joyn/reference/report_from_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Report frequencies from attributes in report var — report_from_attr","title":"Report frequencies from attributes in report var — report_from_attr","text":"Report frequencies attributes report var","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/report_from_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report frequencies from attributes in report var — report_from_attr","text":"","code":"report_from_attr(x, y, reportvar)"},{"path":"https://randrescastaneda.github.io/joyn/reference/report_from_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report frequencies from attributes in report var — report_from_attr","text":"x dataframe joyn_workhorse y dataframe original merge (\"right\" \"using\")","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/report_from_attr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report frequencies from attributes in report var — report_from_attr","text":"dataframe frequencies report var","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/right_join.html","id":null,"dir":"Reference","previous_headings":"","what":"Right join two data frames — right_join","title":"Right join two data frames — right_join","text":"joyn wrapper works similar fashion dplyr::right_join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/right_join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right join two data frames — right_join","text":"","code":"right_join(   x,   y,   by = intersect(names(x), names(y)),   copy = FALSE,   suffix = c(\".x\", \".y\"),   keep = NULL,   na_matches = c(\"na\", \"never\"),   multiple = \"all\",   unmatched = \"drop\",   relationship = \"one-to-one\",   y_vars_to_keep = TRUE,   update_values = FALSE,   update_NAs = update_values,   reportvar = getOption(\"joyn.reportvar\"),   reporttype = c(\"factor\", \"character\", \"numeric\"),   roll = NULL,   keep_common_vars = FALSE,   sort = TRUE,   verbose = getOption(\"joyn.verbose\"),   ... )"},{"path":"https://randrescastaneda.github.io/joyn/reference/right_join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right join two data frames — right_join","text":"x data frame: referred left R terminology, master Stata terminology. y data frame: referred right R terminology, using Stata terminology. character vector variables join . NULL, default, joyn natural join, using variables common names across two tables. message lists variables can check correct (suppress message, simply explicitly list variables want join). join different variables x y use vector expressions. example, = c(\"= b\", \"z\") use \"\" x, \"b\" y, \"z\" tables. copy x y data source, copy TRUE, y copied src x.  allows join tables across srcs, potentially expensive operation must opt . suffix non-joined duplicate variables x y, suffixes added output disambiguate . character vector length 2. keep join keys x y preserved output? NULL, default, joins equality retain keys x, joins inequality retain keys inputs. TRUE, keys inputs retained. FALSE, keys x retained. right full joins, data key columns corresponding rows exist y merged key columns x. used joining inequality conditions. na_matches two NA two NaN values match? \"na\", default, treats two NA two NaN values equal, like %%, match(), merge(). \"never\" treats two NA two NaN values different, never match together values. similar joins database sources base::merge(incomparables = NA). multiple Handling rows x multiple matches y. row x: \"\", default, returns every match detected y. behavior SQL. \"\" returns one match detected y, guarantees match returned. often faster \"first\" \"last\" just need detect least one match. \"first\" returns first match detected y. \"last\" returns last match detected y. unmatched unmatched keys result dropped rows handled? \"drop\" drops unmatched keys result. \"error\" throws error unmatched keys detected. unmatched intended protect accidentally dropping rows join. checks unmatched keys input potentially drop rows. left joins, checks y. right joins, checks x. inner joins, checks x y. case, unmatched also allowed character vector length 2 specify behavior x y independently. relationship Handling expected relationship keys x y. expectations chosen list invalidated, error thrown. NULL, default, expect relationship x y. However, equality joins check many--many relationship (typically unexpected) warn one occurs, encouraging either take closer look inputs make relationship explicit specifying \"many--many\". See Many--many relationships section details. \"one--one\" expects: row x matches 1 row y. row y matches 1 row x. \"one--many\" expects: row y matches 1 row x. \"many--one\" expects: row x matches 1 row y. \"many--many\" perform relationship checks, provided allow explicit relationship know exists. relationship handle cases zero matches. , see unmatched. y_vars_to_keep character: Vector variable names y kept merge. TRUE (default), keeps brings variables y x. FALSE NULL, bring variable x, report generated. update_values logical: TRUE, update values variables x actual variables y name ones x. NAs y used update actual values x. Yet, default, NAs x updated values y. avoid , make sure set update_NAs = FALSE update_NAs logical: TRUE, update NA values variables x actual values variables y name ones x. FALSE, NA values updated, even update_values TRUE reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. reporttype character: One \"character\" \"numeric\". Default \"character\". \"numeric\", reporting variable contain  numeric codes source contents observation joined table. See information. roll double: implemented keep_common_vars logical: TRUE, keep original variable y tables common variable names. Thus, prefix \"y.\" added original name distinguish resulting variable joined table. sort logical: TRUE, sort key variables . Default FALSE. verbose logical: FALSE, display message (programmer's option). Default TRUE. ... Arguments passed joyn match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections). allow.cartesian logical: Check documentation official web site. Default NULL, implies join \"1:1\" FALSE, join \"m\" , converted TRUE. specifying TRUE FALSE force behavior join. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . yvars : use now y_vars_to_keep keep_y_in_x : use now keep_common_vars msg_type character: type messages display default na.last logical. TRUE, missing values data placed last; FALSE, placed first; NA removed. na.last=NA valid x[order(., na.last)] default TRUE. setorder setorderv accept TRUE/FALSE default FALSE.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/right_join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Right join two data frames — right_join","text":"data frame class x. properties output close possible ones returned dplyr alternative.","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/right_join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Right join two data frames — right_join","text":"","code":"# Simple right join library(data.table)  x1 = data.table(id = c(1L, 1L, 2L, 3L, NA_integer_),                 t  = c(1L, 2L, 1L, 2L, NA_integer_),                 x  = 11:15) y1 = data.table(id = c(1,2, 4),                 y  = c(11L, 15L, 16)) right_join(x1, y1, relationship = \"many-to-one\") #>  #> ── JOYn Report ── #>  #>   .joyn n percent #> 1     x 2     50% #> 2     y 1     25% #> 3 x & y 1     25% #> 4 total 4    100% #> ────────────────────────────────────────────────────────── End of JOYn report ── #> ℹ Note: Joyn's report available in variable .joyn #> ℹ Note: Removing key variables id from id and y #>       id     t     x     y  .joyn #>    <num> <int> <int> <num> <fctr> #> 1:     1     1    11    11  x & y #> 2:     1     2    12    11  x & y #> 3:     2     1    13    15  x & y #> 4:     4    NA    NA    16      y"},{"path":"https://randrescastaneda.github.io/joyn/reference/set_col_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Add x key var and y key var (with suffixes) to x and y -when joining by different variables and keep is true — set_col_names","title":"Add x key var and y key var (with suffixes) to x and y -when joining by different variables and keep is true — set_col_names","text":"Add x key var y key var (suffixes) x y -joining different variables keep true","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/set_col_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add x key var and y key var (with suffixes) to x and y -when joining by different variables and keep is true — set_col_names","text":"","code":"set_col_names(x, y, by, suffix, jn_type)"},{"path":"https://randrescastaneda.github.io/joyn/reference/set_col_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add x key var and y key var (with suffixes) to x and y -when joining by different variables and keep is true — set_col_names","text":"x data table: left table y data table: right table character vector variables join suffix character(2) specifying suffixes used making non-column names unique jn_type character specifying type join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/set_col_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add x key var and y key var (with suffixes) to x and y -when joining by different variables and keep is true — set_col_names","text":"list containing x y","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/set_joyn_options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set joyn options — set_joyn_options","title":"Set joyn options — set_joyn_options","text":"function used change value one joyn options","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/set_joyn_options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set joyn options — set_joyn_options","text":"","code":"set_joyn_options(..., env = .joynenv)"},{"path":"https://randrescastaneda.github.io/joyn/reference/set_joyn_options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set joyn options — set_joyn_options","text":"... pairs option = value env environment, joyn environment default","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/set_joyn_options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set joyn options — set_joyn_options","text":"joyn new options values invisibly list","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/set_joyn_options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set joyn options — set_joyn_options","text":"","code":"joyn:::set_joyn_options(joyn.verbose = FALSE, joyn.reportvar = \"joyn_status\") joyn:::set_joyn_options() # return to default options"},{"path":"https://randrescastaneda.github.io/joyn/reference/split_match_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Split matching type — split_match_type","title":"Split matching type — split_match_type","text":"Split matching type (one \"1:1\", \"m:1\", \"1:m\", \"m:m\") two components","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/split_match_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split matching type — split_match_type","text":"","code":"split_match_type(match_type)"},{"path":"https://randrescastaneda.github.io/joyn/reference/split_match_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split matching type — split_match_type","text":"match_type character: one \"m:m\", \"m:1\", \"1:m\", \"1:1\". Default \"1:1\" since restrictive. However, following Stata's recommendation, better explicit use three match types (See details match types sections).","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/split_match_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split matching type — split_match_type","text":"character vector","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_checked_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"store checked variables as possible ids — store_checked_ids","title":"store checked variables as possible ids — store_checked_ids","text":"function processes list possible IDs removing NULL entries, storing set checked variables attribute specified environment, returning updated list possible IDs.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_checked_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"store checked variables as possible ids — store_checked_ids","text":"","code":"store_checked_ids(checked_ids, possible_ids, env = .joynenv)"},{"path":"https://randrescastaneda.github.io/joyn/reference/store_checked_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"store checked variables as possible ids — store_checked_ids","text":"checked_ids vector variable names checked possible IDs. possible_ids list containing potential identifiers. list may contain NULL values, removed function. env environment checked_ids stored. default .joynenv.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_checked_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"store checked variables as possible ids — store_checked_ids","text":"list possible IDs NULL values removed, checked_ids stored attribute.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"Wrapper store_msg function function serves wrapper store_msg function, used store various types messages within .joyn environment. :errors, warnings, timing information, info","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"","code":"store_joyn_msg(err = NULL, warn = NULL, timing = NULL, info = NULL)"},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"err character string representing error message stored. Default value NULL warn character string representing warning message stored. Default value NULL timing character string representing timing message stored. Default value NULL info character string representing info message stored. Default value NULL","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"invisible TRUE","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":"hot-to-pass-the-message-string","dir":"Reference","previous_headings":"","what":"Hot to pass the message string","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"function allows customization message string using cli classes emphasize specific components message format message string: *variables:            .strongVar *function arguments:   .strongArg *dt/df:                .strongTable *text/anything else:   .strong *NOTE: default, number seconds specified timing messages automatically emphasized using custom formatting approach. need apply cli classes specify number seconds.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_joyn_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for store_msg function This function serves as a wrapper for the store_msg function, which is used to store various types of messages within the .joyn environment. :errors, warnings, timing information, or info — store_joyn_msg","text":"","code":"# Timing msg joyn:::store_joyn_msg(timing = paste(\"  The entire joyn function, including checks,                                        is executed in  \", round(1.8423467, 6)))  # Error msg joyn:::store_joyn_msg(err = \" Input table {.strongTable x} has no columns.\")  # Info msg joyn:::store_joyn_msg(info = \"Joyn's report available in variable {.strongVar .joyn}\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/store_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Store joyn message to .joynenv environment — store_msg","title":"Store joyn message to .joynenv environment — store_msg","text":"Store joyn message .joynenv environment","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store joyn message to .joynenv environment — store_msg","text":"","code":"store_msg(type, ...)"},{"path":"https://randrescastaneda.github.io/joyn/reference/store_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store joyn message to .joynenv environment — store_msg","text":"... combination type text form style1 = text1, style2 = text2, etc.","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/store_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store joyn message to .joynenv environment — store_msg","text":"current message data frame invisibly","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/store_msg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store joyn message to .joynenv environment — store_msg","text":"","code":"# Storing msg with msg_type \"info\" joyn:::store_msg(\"info\",   ok = cli::symbol$tick, \"  \",   pale = \"This is an info message\")  # Storing msg with msg_type \"warn\" joyn:::store_msg(\"warn\",   err = cli::symbol$cross, \"  \",   note = \"This is a warning message\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/style.html","id":null,"dir":"Reference","previous_headings":"","what":"style of text displayed — style","title":"style of text displayed — style","text":"adaptation https://github.com/r-lib/pkgbuild/blob/3ba537ab8a6ac07d3fe11c17543677d2a0786be6/R/styles.R","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"style of text displayed — style","text":"","code":"style(..., sep = \"\")"},{"path":"https://randrescastaneda.github.io/joyn/reference/style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"style of text displayed — style","text":"... combination type text form type1 = text1, type2 = text2 sep character string separate terms paste","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"style of text displayed — style","text":"formatted text","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/type_choices.html","id":null,"dir":"Reference","previous_headings":"","what":"Choice of messages — type_choices","title":"Choice of messages — type_choices","text":"Choice messages","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/type_choices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choice of messages — type_choices","text":"","code":"type_choices()"},{"path":"https://randrescastaneda.github.io/joyn/reference/type_choices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choice of messages — type_choices","text":"character vector choices types","code":""},{"path":[]},{"path":"https://randrescastaneda.github.io/joyn/reference/unmatched_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for unmatched keys — unmatched_keys","title":"Check for unmatched keys — unmatched_keys","text":"Gives TRUE unmatched keys, FALSE .","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/unmatched_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for unmatched keys — unmatched_keys","text":"","code":"unmatched_keys(x, out, by)"},{"path":"https://randrescastaneda.github.io/joyn/reference/unmatched_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for unmatched keys — unmatched_keys","text":"x input table join output join argument, giving keys join","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/unmatched_keys.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for unmatched keys — unmatched_keys","text":"logical","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/update_na_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Update NA and/or values — update_na_values","title":"Update NA and/or values — update_na_values","text":"function updates NAs /values following way: update_NAs TRUE: update NAs var x values var y name update_values = TRUE: update values, NAs, var x values var y name. NAs y used update values x . (e.g., x.var = 10 y.var = NA, x.var remains 10) update_NAs update_values TRUE, NAs values x updated described update_NAs update_values FALSE, update","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/update_na_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update NA and/or values — update_na_values","text":"","code":"update_na_values(   dt,   var,   reportvar = getOption(\"joyn.reportvar\"),   suffixes = getOption(\"joyn.suffixes\"),   rep_NAs = FALSE,   rep_values = FALSE )"},{"path":"https://randrescastaneda.github.io/joyn/reference/update_na_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update NA and/or values — update_na_values","text":"dt joined data.table var variable(s) updated reportvar character: Name reporting variable. Default \".joyn\". variable \"_merge\" Stata performing merge. FALSE NULL, reporting variable excluded final table, though summary join display concluding. suffixes character(2) specifying suffixes used making non-column names unique. suffix behaviour works similar fashion base::merge method . rep_NAs inherited joyn update_NAs rep_values inherited joyn update_values","code":""},{"path":"https://randrescastaneda.github.io/joyn/reference/update_na_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update NA and/or values — update_na_values","text":"data.table","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-development-version","dir":"Changelog","previous_headings":"","what":"joyn (development version)","title":"joyn (development version)","text":"Improve displaying messages. Now, clickable. Improve algorithm find variables work possible IDs see possible_ids(). Improve algorithm is_id() freq_table().","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-023","dir":"Changelog","previous_headings":"","what":"joyn 0.2.3","title":"joyn 0.2.3","text":"CRAN release: 2024-08-21 Fix bug left join work updating values full join maintained.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-022","dir":"Changelog","previous_headings":"","what":"joyn 0.2.2","title":"joyn 0.2.2","text":"CRAN release: 2024-07-10 Remove unmasking functions realized necessary.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-021-not-in-cran","dir":"Changelog","previous_headings":"","what":"joyn 0.2.1 (Not in CRAN)","title":"joyn 0.2.1 (Not in CRAN)","text":"Add anti_join() function. Add unmask_joyn() function unmask joyn functions mask dplyr equivalents. Add information duplicated obs variable match type 1 rathern m. improve inefficiencies deep copies m:m joins Replace m:m joins data.table::merge.data.table collapse::join. Thanks @SebKrantz suggestion (#58). Add information duplicated obs variable match type 1 rather m. Internal: improve storing joyn messages. Improve creation reporting variable. Now, created [collapse::join] rather joyn function. addition, reporting variable created factor improve performance. Thanks @SebKrantz suggestion (#58)","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"breaking-changes-0-2-1","dir":"Changelog","previous_headings":"","what":"breaking changes","title":"joyn 0.2.1 (Not in CRAN)","text":"Now, default, joyn sort data. avoid unnecessary computational time time needed. user wants sort data, can use sort argument, triggers sorting mechanism collapse package. report variable (named “.join” default) now factor instead character. Yet, users can still use character want reporttype = \"character\".","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-020","dir":"Changelog","previous_headings":"","what":"joyn 0.2.0","title":"joyn 0.2.0","text":"CRAN release: 2024-03-29 joyn gained two new authors: Zander Prinsloo Rossana Tatulli.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"joyn 0.2.0","text":"Function joyn::merge() replaced joyn::joyn(). now main function joyn package. Arguments allow.cartesian, yvars, keep_y_in_x deprecated. latter two replaced y_vars_to_keep keep_common_vars, respectively. new argument names bring clarity arguments .","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"joyn 0.2.0","text":"New function joyn::merge() works mask base::merge() data.table::merge.data.table(). joyn::merge() features previous two, includes features joyn::joyn(). Messages style improved categorized. See message vignette information. New functions mimic dplyr joins. joyn variants features joyn::joyn() lack advance features dplyr joins like joyn::join_by()","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"minor-improvements-and-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor improvements and fixes","title":"joyn 0.2.0","text":"Minor inconsistency bugs fixed.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-014","dir":"Changelog","previous_headings":"","what":"joyn 0.1.4","title":"joyn 0.1.4","text":"CRAN release: 2021-12-14 update_NAs now FALSE even update_values TRUE Select rows--keep transformation updated values NAs avoid keeping rows y match x whose values got updated update_values = TRUE Solve issues #1 #19 Change data.table::merge.data.table syntax joins. makes easier work consistent across different join types. Remove previous lazy-loaded data.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-013","dir":"Changelog","previous_headings":"","what":"joyn 0.1.3","title":"joyn 0.1.3","text":"CRAN release: 2021-04-28 Convert external data external data.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-012","dir":"Changelog","previous_headings":"","what":"joyn 0.1.2","title":"joyn 0.1.2","text":"Add function possible_ids() identify variables suitable uniquely identify database.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-0-1-2","dir":"Changelog","previous_headings":"","what":"joyn 0.1.1","title":"joyn 0.1.2","text":"Add function is_id() check whether table uniquely identified key variables Add function freq_table() substitute janitor::tabyl. makes convenient users janitor installed.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-0-1-2-1","dir":"Changelog","previous_headings":"","what":"joyn 0.1.0","title":"joyn 0.1.2","text":"Fix bug argument using “=” “==”.","code":""},{"path":"https://randrescastaneda.github.io/joyn/news/index.html","id":"joyn-0-1-2-2","dir":"Changelog","previous_headings":"","what":"joyn 0.0.1","title":"joyn 0.1.2","text":"First Public release","code":""}]
